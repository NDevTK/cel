// Code generated by protoc-gen-go.
// source: schema/asset/iis.proto
// DO NOT EDIT!

/*
Package asset is a generated protocol buffer package.

It is generated from these files:
	schema/asset/iis.proto

It has these top-level messages:
	Server
	Bindings
	Site
	Application
*/
package asset

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import net "schema/asset"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Server struct {
	// Name of server instance.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Name of host machine. Should refer to a |WindowsMachine| entry.
	// Container information for the IIS instance will be inherited from the
	// WindowsMachine entry.
	Host string `protobuf:"bytes,2,opt,name=host" json:"host,omitempty"`
}

func (m *Server) Reset()                    { *m = Server{} }
func (m *Server) String() string            { return proto.CompactTextString(m) }
func (*Server) ProtoMessage()               {}
func (*Server) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Server) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Server) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

// Bindings for a website onto a webserver.
type Bindings struct {
	// Hostname. Can be empty for all hostnames.
	Hostname string `protobuf:"bytes,1,opt,name=hostname" json:"hostname,omitempty"`
	// Protocol. Must be either HTTP or HTTPS. If using HTTPS, the SSL
	// information is also required.
	Protocol net.Protocol `protobuf:"varint,2,opt,name=protocol,enum=net.Protocol" json:"protocol,omitempty"`
	// Port to use. Leave empty to use the default port based on protocol.
	Port uint32 `protobuf:"varint,3,opt,name=port" json:"port,omitempty"`
	// Name of a cert.Certificate.
	Certificate string `protobuf:"bytes,4,opt,name=certificate" json:"certificate,omitempty"`
	// Whether or not to use SNI. Only applicable when |protocol| is HTTPS. If
	// this value is false, then only one HTTPS site can be bound to a single
	// server.
	UseSni bool `protobuf:"varint,5,opt,name=use_sni,json=useSni" json:"use_sni,omitempty"`
}

func (m *Bindings) Reset()                    { *m = Bindings{} }
func (m *Bindings) String() string            { return proto.CompactTextString(m) }
func (*Bindings) ProtoMessage()               {}
func (*Bindings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Bindings) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *Bindings) GetProtocol() net.Protocol {
	if m != nil {
		return m.Protocol
	}
	return net.Protocol_UNKNOWN
}

func (m *Bindings) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Bindings) GetCertificate() string {
	if m != nil {
		return m.Certificate
	}
	return ""
}

func (m *Bindings) GetUseSni() bool {
	if m != nil {
		return m.UseSni
	}
	return false
}

type Site struct {
	// Name of site.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Name of server. Should refer to a |Server| entry. A single server can host
	// multiple sites as long as those sites use distinct binding information.
	Server   string    `protobuf:"bytes,2,opt,name=server" json:"server,omitempty"`
	Bindings *Bindings `protobuf:"bytes,3,opt,name=bindings" json:"bindings,omitempty"`
}

func (m *Site) Reset()                    { *m = Site{} }
func (m *Site) String() string            { return proto.CompactTextString(m) }
func (*Site) ProtoMessage()               {}
func (*Site) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Site) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Site) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *Site) GetBindings() *Bindings {
	if m != nil {
		return m.Bindings
	}
	return nil
}

type Application struct {
	// Name of application.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Name of the iis.Site that's hosting this application.
	Site string `protobuf:"bytes,2,opt,name=site" json:"site,omitempty"`
}

func (m *Application) Reset()                    { *m = Application{} }
func (m *Application) String() string            { return proto.CompactTextString(m) }
func (*Application) ProtoMessage()               {}
func (*Application) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Application) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Application) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

func init() {
	proto.RegisterType((*Server)(nil), "iis.Server")
	proto.RegisterType((*Bindings)(nil), "iis.Bindings")
	proto.RegisterType((*Site)(nil), "iis.Site")
	proto.RegisterType((*Application)(nil), "iis.Application")
}

func init() { proto.RegisterFile("schema/asset/iis.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 273 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xc1, 0x4e, 0x83, 0x40,
	0x10, 0x86, 0x83, 0x6d, 0x29, 0x0e, 0xc1, 0xc3, 0x1e, 0x2a, 0xe1, 0x44, 0x38, 0xe1, 0x85, 0x9a,
	0x1a, 0x1f, 0xc0, 0x3e, 0x81, 0x81, 0x9b, 0x89, 0x31, 0x14, 0x47, 0x3b, 0xb1, 0xdd, 0x25, 0x3b,
	0x53, 0x7d, 0x1d, 0x1f, 0xd5, 0xec, 0x96, 0x92, 0x9a, 0xe8, 0xed, 0x9f, 0x7f, 0x60, 0x66, 0xbe,
	0x7f, 0x61, 0xc1, 0xdd, 0x16, 0xf7, 0xed, 0xb2, 0x65, 0x46, 0x59, 0x12, 0x71, 0xd5, 0x5b, 0x23,
	0x46, 0x4d, 0x88, 0x38, 0xcb, 0x7e, 0x35, 0x35, 0xca, 0x97, 0xb1, 0x1f, 0xc7, 0x0f, 0x8a, 0x5b,
	0x08, 0x1b, 0xb4, 0x9f, 0x68, 0x95, 0x82, 0xa9, 0x6e, 0xf7, 0x98, 0x06, 0x79, 0x50, 0x5e, 0xd6,
	0x5e, 0x3b, 0x6f, 0x6b, 0x58, 0xd2, 0x8b, 0xa3, 0xe7, 0x74, 0xf1, 0x1d, 0x40, 0xb4, 0x26, 0xfd,
	0x4a, 0xfa, 0x9d, 0x55, 0x06, 0x91, 0x33, 0xcf, 0x7e, 0x1c, 0x6b, 0x75, 0x03, 0x91, 0xdf, 0xd1,
	0x99, 0x9d, 0x1f, 0x70, 0xb5, 0x4a, 0x2a, 0x8d, 0x52, 0x3d, 0x0e, 0x66, 0x3d, 0xb6, 0xdd, 0x9e,
	0xde, 0x58, 0x49, 0x27, 0x79, 0x50, 0x26, 0xb5, 0xd7, 0x2a, 0x87, 0xb8, 0x43, 0x2b, 0xf4, 0x46,
	0x5d, 0x2b, 0x98, 0x4e, 0xfd, 0xf4, 0x73, 0x4b, 0x5d, 0xc3, 0xfc, 0xc0, 0xf8, 0xc2, 0x9a, 0xd2,
	0x59, 0x1e, 0x94, 0x51, 0x1d, 0x1e, 0x18, 0x1b, 0x4d, 0xc5, 0x33, 0x4c, 0x1b, 0x12, 0xfc, 0x13,
	0x69, 0x01, 0x21, 0x7b, 0xe0, 0x01, 0x6a, 0xa8, 0xdc, 0xb5, 0x9b, 0x81, 0xca, 0x9f, 0x11, 0xaf,
	0x92, 0xca, 0xe5, 0x78, 0x42, 0xad, 0xc7, 0x76, 0x71, 0x0f, 0xf1, 0x43, 0xdf, 0xef, 0xdc, 0x11,
	0x64, 0xf4, 0x7f, 0xc1, 0x31, 0x09, 0x9e, 0x82, 0x73, 0x7a, 0x3d, 0x7f, 0x9a, 0xf9, 0x17, 0xd8,
	0x84, 0x9e, 0xfb, 0xee, 0x27, 0x00, 0x00, 0xff, 0xff, 0xd6, 0x81, 0x84, 0xd6, 0xb5, 0x01, 0x00,
	0x00,
}
