// Code generated by protoc-gen-go.
// source: schema/host/host_environment.proto
// DO NOT EDIT!

/*
Package host is a generated protocol buffer package.

It is generated from these files:
	schema/host/host_environment.proto

It has these top-level messages:
	Project
	MachineType
	AddressPool
	HostEnvironment
*/
package host

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import net "schema/asset"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// GCP project hosting.
type Project struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Project) Reset()                    { *m = Project{} }
func (m *Project) String() string            { return proto.CompactTextString(m) }
func (*Project) ProtoMessage()               {}
func (*Project) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Project) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Describes a type of machine (virtual or otherwise).
type MachineType struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *MachineType) Reset()                    { *m = MachineType{} }
func (m *MachineType) String() string            { return proto.CompactTextString(m) }
func (*MachineType) ProtoMessage()               {}
func (*MachineType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MachineType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type AddressPool struct {
	Name    string         `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Address []*net.Address `protobuf:"bytes,2,rep,name=address" json:"address,omitempty"`
}

func (m *AddressPool) Reset()                    { *m = AddressPool{} }
func (m *AddressPool) String() string            { return proto.CompactTextString(m) }
func (*AddressPool) ProtoMessage()               {}
func (*AddressPool) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AddressPool) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AddressPool) GetAddress() []*net.Address {
	if m != nil {
		return m.Address
	}
	return nil
}

type HostEnvironment struct {
	Project     *Project       `protobuf:"bytes,1,opt,name=project" json:"project,omitempty"`
	MachineType []*MachineType `protobuf:"bytes,2,rep,name=machine_type,json=machineType" json:"machine_type,omitempty"`
	AddressPool []*AddressPool `protobuf:"bytes,3,rep,name=address_pool,json=addressPool" json:"address_pool,omitempty"`
}

func (m *HostEnvironment) Reset()                    { *m = HostEnvironment{} }
func (m *HostEnvironment) String() string            { return proto.CompactTextString(m) }
func (*HostEnvironment) ProtoMessage()               {}
func (*HostEnvironment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *HostEnvironment) GetProject() *Project {
	if m != nil {
		return m.Project
	}
	return nil
}

func (m *HostEnvironment) GetMachineType() []*MachineType {
	if m != nil {
		return m.MachineType
	}
	return nil
}

func (m *HostEnvironment) GetAddressPool() []*AddressPool {
	if m != nil {
		return m.AddressPool
	}
	return nil
}

func init() {
	proto.RegisterType((*Project)(nil), "host_environment.Project")
	proto.RegisterType((*MachineType)(nil), "host_environment.MachineType")
	proto.RegisterType((*AddressPool)(nil), "host_environment.AddressPool")
	proto.RegisterType((*HostEnvironment)(nil), "host_environment.HostEnvironment")
}

func init() { proto.RegisterFile("schema/host/host_environment.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 257 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0x51, 0x4b, 0xf3, 0x30,
	0x14, 0x86, 0xe9, 0xb7, 0xb1, 0xf2, 0x9d, 0x14, 0x94, 0x5c, 0xd5, 0xc1, 0x60, 0xf6, 0x42, 0x76,
	0xd5, 0xc1, 0xf6, 0x07, 0xa6, 0x20, 0xe8, 0x85, 0x30, 0x82, 0x57, 0xde, 0x94, 0xd8, 0x1d, 0xe8,
	0x74, 0xc9, 0x09, 0xc9, 0x41, 0xd9, 0x5f, 0xf4, 0x57, 0x89, 0x6d, 0xc6, 0x8a, 0x9b, 0x37, 0xa5,
	0x49, 0x9e, 0xf7, 0xe4, 0x7d, 0x02, 0x45, 0xa8, 0x1b, 0x34, 0x7a, 0xde, 0x50, 0xe0, 0xf6, 0x53,
	0xa1, 0xfd, 0xd8, 0x7a, 0xb2, 0x06, 0x2d, 0x97, 0xce, 0x13, 0x93, 0xbc, 0xfc, 0xbd, 0x3f, 0x1e,
	0xc7, 0x94, 0x0e, 0x01, 0x79, 0x6e, 0x91, 0x3f, 0xc9, 0xbf, 0x77, 0x74, 0x31, 0x81, 0x74, 0xed,
	0xe9, 0x0d, 0x6b, 0x96, 0x12, 0x86, 0x56, 0x1b, 0xcc, 0x93, 0x69, 0x32, 0xfb, 0xaf, 0xda, 0xff,
	0xe2, 0x1a, 0xc4, 0x93, 0xae, 0x9b, 0xad, 0xc5, 0xe7, 0xbd, 0xc3, 0xb3, 0xc8, 0x23, 0x88, 0xdb,
	0xcd, 0xc6, 0x63, 0x08, 0x6b, 0xa2, 0xdd, 0x39, 0x44, 0xde, 0x40, 0xaa, 0x3b, 0x24, 0xff, 0x37,
	0x1d, 0xcc, 0xc4, 0x22, 0x2b, 0x2d, 0x72, 0x19, 0x63, 0xea, 0x70, 0x58, 0x7c, 0x25, 0x70, 0xf1,
	0x40, 0x81, 0xef, 0x8f, 0xe5, 0xe5, 0x12, 0x52, 0xd7, 0x15, 0x6c, 0x47, 0x8a, 0xc5, 0x55, 0x79,
	0x22, 0x1e, 0x0d, 0xd4, 0x81, 0x94, 0x2b, 0xc8, 0x4c, 0x57, 0xbb, 0xe2, 0xbd, 0xc3, 0x78, 0xeb,
	0xe4, 0x34, 0xd9, 0x93, 0x53, 0xc2, 0xf4, 0x4c, 0x57, 0x90, 0xc5, 0x56, 0x95, 0x23, 0xda, 0xe5,
	0x83, 0xbf, 0x26, 0xf4, 0xdc, 0x95, 0xd0, 0xc7, 0xc5, 0xdd, 0xe8, 0x65, 0xf8, 0x03, 0xbf, 0x8e,
	0xda, 0x87, 0x5e, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0xdf, 0x80, 0x08, 0x66, 0xbc, 0x01, 0x00,
	0x00,
}
