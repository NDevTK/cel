// Code generated by protoc-gen-go.
// source: schema/common/fileref.proto
// DO NOT EDIT!

package common

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// A file reference. Use this when the configuration should refer to a file or
// a directory that's specified as part of the configuraion. All such paths are
// resolved *relative to the source file* in which the reference appears.
type FileReference struct {
	// Path relative to the location of the .textpb file in which the reference
	// appears. Absolute paths are not allowed.
	//
	//   * Path separators are always forward slashes.
	//   * No parent directory traversal. I.e. ".." is an invalid path component.
	//   * '.' is a valid component, but you might as well leave it out.
	//   * The referenced path must exist.
	//
	// This, of course, means that textpb files that refer to other files should
	// live higher up in the directory tree or live beside the relevant files.
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	// After the reference is resolved, this field will contain the full path to
	// the resource and will use path separators consistent with the underlying
	// platform.
	ResolvedPath string `protobuf:"bytes,2,opt,name=resolved_path,json=resolvedPath" json:"resolved_path,omitempty"`
}

func (m *FileReference) Reset()                    { *m = FileReference{} }
func (m *FileReference) String() string            { return proto.CompactTextString(m) }
func (*FileReference) ProtoMessage()               {}
func (*FileReference) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *FileReference) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *FileReference) GetResolvedPath() string {
	if m != nil {
		return m.ResolvedPath
	}
	return ""
}

func init() {
	proto.RegisterType((*FileReference)(nil), "common.FileReference")
}

func init() { proto.RegisterFile("schema/common/fileref.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 188 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x8e, 0xb1, 0x6a, 0xc3, 0x30,
	0x14, 0x45, 0xb1, 0x29, 0xa6, 0x15, 0xf5, 0xa2, 0xc9, 0xb4, 0x4b, 0xe9, 0x54, 0x28, 0x58, 0xd0,
	0xf6, 0x0b, 0x3c, 0x74, 0x36, 0x1e, 0xbb, 0x14, 0x47, 0xb9, 0xb6, 0x04, 0x92, 0x9e, 0x78, 0x92,
	0xf3, 0x01, 0xf9, 0xa7, 0xfc, 0x5f, 0x88, 0x9d, 0x2c, 0xd9, 0x2e, 0xf7, 0x9c, 0xe1, 0x88, 0xd7,
	0xa4, 0x0d, 0xfc, 0xa8, 0x34, 0x79, 0x4f, 0x41, 0x4d, 0xd6, 0x81, 0x31, 0xb5, 0x91, 0x29, 0x93,
	0xac, 0xb6, 0xf7, 0xe5, 0x4e, 0xa2, 0x98, 0x2d, 0x85, 0xb4, 0x49, 0xef, 0xbd, 0xa8, 0x7f, 0xad,
	0xc3, 0x80, 0x09, 0x8c, 0xa0, 0x21, 0xa5, 0x78, 0x88, 0x63, 0x36, 0x4d, 0xf1, 0x56, 0x7c, 0x3c,
	0x0d, 0xeb, 0x96, 0x9f, 0xa2, 0x66, 0x24, 0x72, 0x07, 0xec, 0xff, 0x57, 0x58, 0x5e, 0x60, 0x57,
	0x1d, 0x4f, 0x4d, 0xf9, 0x58, 0x0c, 0xcf, 0x37, 0xd8, 0x8f, 0xd9, 0x74, 0x3f, 0x7f, 0x5f, 0xda,
	0x30, 0x79, 0xbb, 0xf8, 0x76, 0x26, 0x9a, 0x1d, 0x12, 0x2d, 0xac, 0xd1, 0x6a, 0xf2, 0x0a, 0x21,
	0x83, 0x23, 0xdb, 0x04, 0xa5, 0xe1, 0xd4, 0x4c, 0xd7, 0xaa, 0x5d, 0xb5, 0xe6, 0x7c, 0x9f, 0x03,
	0x00, 0x00, 0xff, 0xff, 0xeb, 0xb1, 0x1f, 0x6f, 0xd2, 0x00, 0x00, 0x00,
}
