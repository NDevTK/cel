// Code generated by protoc-gen-go.
// source: schema/common/options.proto
// DO NOT EDIT!

/*
Package common is a generated protocol buffer package.

It is generated from these files:
	schema/common/options.proto
	schema/common/fileref.proto
	go/common/testdata/testmsgs.proto

It has these top-level messages:
	Validation
	FileReference
	TestHasBadField
	TestHasGoodField
	TestHasBadSlice
	TestHasGoodSlice
	TestGoodOneOf
	TestBadOneOf
	TestBadValidateArgs
	TestBadReturnType
	TestBadProto
	TestGoodProto
	TestMessageWithOptions
	TestBadMessageWithOptions
	TestFileRefProto
	TestMessageWithTypes
*/
package common

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/protoc-gen-go/descriptor"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Validation_FieldType int32

const (
	// No validation is to be performed.
	Validation_UNKNOWN Validation_FieldType = 0
	// When applied to a 'string' field, implies that the field value cannot be
	// empty. This is implied for any field that has a non-empty external
	// reference (i.e. ref != ""), or the validation type is LABEL, FQDN or
	// ORGLABEL.
	//
	// When applied to a 'repeated' field, implies that there must be at least
	// one instance of the field.
	//
	// When applied to 'oneof' implies that at least one of the alternatives must
	// be specified.
	//
	// When applied to a 'map' implies that there should be at least one mapping.
	//
	// E.g.: Declare the 'h' field of Foo message to be required:
	//
	//     message Foo {
	//       string h = 1 [(v).type=REQUIRED]
	//     }
	Validation_REQUIRED Validation_FieldType = 1
	// This is an output field and is not expected to be populated in a asset
	// manifest literal. The field will be populated during the asset
	// resolution process and made available to downstream consumers of the
	// manifest.
	Validation_OUTPUT Validation_FieldType = 2
	// The field value cannot be empty and must match the <label> production in
	// RFC 1035. This validation type is applied by default for for any field
	// named 'name'.
	Validation_LABEL Validation_FieldType = 3
	// The field value cannot be empty, and must match the <subdomains>
	// production in RFC 1035. Can only be applied to 'string' fields.
	Validation_FQDN Validation_FieldType = 4
	// A label with an optional org component. These look like:
	// example.com:foo. Cannot be empty.
	Validation_ORGLABEL Validation_FieldType = 5
)

var Validation_FieldType_name = map[int32]string{
	0: "UNKNOWN",
	1: "REQUIRED",
	2: "OUTPUT",
	3: "LABEL",
	4: "FQDN",
	5: "ORGLABEL",
}
var Validation_FieldType_value = map[string]int32{
	"UNKNOWN":  0,
	"REQUIRED": 1,
	"OUTPUT":   2,
	"LABEL":    3,
	"FQDN":     4,
	"ORGLABEL": 5,
}

func (x Validation_FieldType) String() string {
	return proto.EnumName(Validation_FieldType_name, int32(x))
}
func (Validation_FieldType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type Validation struct {
	Type Validation_FieldType `protobuf:"varint,1,opt,name=type,enum=common.Validation_FieldType" json:"type,omitempty"`
	// The foreign key. If non-empty, designates that this string field is a
	// reference to a collection designated by |ref|.
	//
	// E.g.: Declare 'network' to be a field that refers to an 'asset.network' by
	// name.
	//
	//     message Foo {
	//       string network = 1 [(v).ref="asset.network"]
	//     }
	//
	// The annotated field must be a string.
	Ref string `protobuf:"bytes,2,opt,name=ref" json:"ref,omitempty"`
	// Indicates that the value is optional. By default adding an annotation to a
	// field marks it as a required field. Setting 'optional' to true negates that.
	//
	// Types that are valid to be assigned to OptionalFlag:
	//	*Validation_Optional
	OptionalFlag isValidation_OptionalFlag `protobuf_oneof:"optional_flag"`
}

func (m *Validation) Reset()                    { *m = Validation{} }
func (m *Validation) String() string            { return proto.CompactTextString(m) }
func (*Validation) ProtoMessage()               {}
func (*Validation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isValidation_OptionalFlag interface {
	isValidation_OptionalFlag()
}

type Validation_Optional struct {
	Optional bool `protobuf:"varint,3,opt,name=optional,oneof"`
}

func (*Validation_Optional) isValidation_OptionalFlag() {}

func (m *Validation) GetOptionalFlag() isValidation_OptionalFlag {
	if m != nil {
		return m.OptionalFlag
	}
	return nil
}

func (m *Validation) GetType() Validation_FieldType {
	if m != nil {
		return m.Type
	}
	return Validation_UNKNOWN
}

func (m *Validation) GetRef() string {
	if m != nil {
		return m.Ref
	}
	return ""
}

func (m *Validation) GetOptional() bool {
	if x, ok := m.GetOptionalFlag().(*Validation_Optional); ok {
		return x.Optional
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Validation) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Validation_OneofMarshaler, _Validation_OneofUnmarshaler, _Validation_OneofSizer, []interface{}{
		(*Validation_Optional)(nil),
	}
}

func _Validation_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Validation)
	// optional_flag
	switch x := m.OptionalFlag.(type) {
	case *Validation_Optional:
		t := uint64(0)
		if x.Optional {
			t = 1
		}
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("Validation.OptionalFlag has unexpected type %T", x)
	}
	return nil
}

func _Validation_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Validation)
	switch tag {
	case 3: // optional_flag.optional
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.OptionalFlag = &Validation_Optional{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _Validation_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Validation)
	// optional_flag
	switch x := m.OptionalFlag.(type) {
	case *Validation_Optional:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

var E_V = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf.FieldOptions)(nil),
	ExtensionType: (*Validation)(nil),
	Field:         50000,
	Name:          "common.v",
	Tag:           "bytes,50000,opt,name=v",
	Filename:      "schema/common/options.proto",
}

func init() {
	proto.RegisterType((*Validation)(nil), "common.Validation")
	proto.RegisterEnum("common.Validation_FieldType", Validation_FieldType_name, Validation_FieldType_value)
	proto.RegisterExtension(E_V)
}

func init() { proto.RegisterFile("schema/common/options.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0x4f, 0x4f, 0xf2, 0x40,
	0x18, 0xc4, 0x59, 0xfe, 0xbd, 0xe5, 0xe1, 0x55, 0x9b, 0x3d, 0x35, 0x8a, 0x49, 0xc3, 0x89, 0x53,
	0xd7, 0xa0, 0x27, 0x6f, 0x10, 0x40, 0x8d, 0xa4, 0x95, 0x0d, 0xd5, 0xc4, 0x8b, 0x29, 0x65, 0x29,
	0x4d, 0x5a, 0x9e, 0xcd, 0xb6, 0x90, 0xf0, 0x05, 0xfc, 0x7c, 0x9e, 0xfc, 0x3c, 0xa6, 0x5d, 0xc0,
	0x83, 0xb7, 0xcd, 0xe4, 0xb7, 0x33, 0xb3, 0xb3, 0x70, 0x95, 0x85, 0x6b, 0x91, 0x06, 0x2c, 0xc4,
	0x34, 0xc5, 0x0d, 0x43, 0x99, 0xc7, 0xb8, 0xc9, 0x1c, 0xa9, 0x30, 0x47, 0xda, 0xd4, 0xea, 0xa5,
	0x1d, 0x21, 0x46, 0x89, 0x60, 0xa5, 0xba, 0xd8, 0xae, 0xd8, 0x52, 0x64, 0xa1, 0x8a, 0x65, 0x8e,
	0x4a, 0x93, 0xdd, 0x6f, 0x02, 0xf0, 0x1a, 0x24, 0xf1, 0x32, 0x28, 0xee, 0xd3, 0x1b, 0xa8, 0xe7,
	0x7b, 0x29, 0x2c, 0x62, 0x93, 0xde, 0x79, 0xbf, 0xe3, 0x68, 0x1f, 0xe7, 0x97, 0x70, 0x26, 0xb1,
	0x48, 0x96, 0xf3, 0xbd, 0x14, 0xbc, 0x24, 0xa9, 0x09, 0x35, 0x25, 0x56, 0x56, 0xd5, 0x26, 0xbd,
	0x16, 0x2f, 0x8e, 0xb4, 0x03, 0x86, 0x6e, 0x13, 0x24, 0x56, 0xcd, 0x26, 0x3d, 0xe3, 0xb1, 0xc2,
	0x4f, 0x4a, 0xd7, 0x87, 0xd6, 0xc9, 0x82, 0xb6, 0xe1, 0x9f, 0xef, 0x3e, 0xbb, 0xde, 0x9b, 0x6b,
	0x56, 0xe8, 0x7f, 0x30, 0xf8, 0x78, 0xe6, 0x3f, 0xf1, 0xf1, 0xc8, 0x24, 0x14, 0xa0, 0xe9, 0xf9,
	0xf3, 0x17, 0x7f, 0x6e, 0x56, 0x69, 0x0b, 0x1a, 0xd3, 0xc1, 0x70, 0x3c, 0x35, 0x6b, 0xd4, 0x80,
	0xfa, 0x64, 0x36, 0x72, 0xcd, 0x7a, 0x81, 0x7b, 0xfc, 0x41, 0xeb, 0x8d, 0xe1, 0x05, 0x9c, 0x1d,
	0x23, 0x3e, 0x56, 0x49, 0x10, 0xdd, 0x0f, 0x80, 0xec, 0xe8, 0xb5, 0xa3, 0x07, 0x70, 0x8e, 0x03,
	0xe8, 0xfa, 0x9e, 0x1e, 0xcb, 0xfa, 0xfa, 0x2c, 0xfa, 0xb5, 0xfb, 0xf4, 0xef, 0x3b, 0x39, 0xd9,
	0x0d, 0xef, 0xde, 0xfb, 0xe1, 0x5a, 0x61, 0x1a, 0x6f, 0xd3, 0x83, 0x4f, 0x86, 0x5b, 0x15, 0x8a,
	0x82, 0x66, 0x62, 0x93, 0x0b, 0x25, 0x55, 0x9c, 0x09, 0x16, 0x8a, 0x84, 0x45, 0x78, 0xf8, 0x89,
	0x45, 0xb3, 0xcc, 0xba, 0xfd, 0x09, 0x00, 0x00, 0xff, 0xff, 0x55, 0xc8, 0x48, 0xdc, 0xa1, 0x01,
	0x00, 0x00,
}
