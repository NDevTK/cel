// Code generated by protoc-gen-go.
// source: schema/host/host_environment.proto
// DO NOT EDIT!

/*
Package host is a generated protocol buffer package.

It is generated from these files:
	schema/host/host_environment.proto

It has these top-level messages:
	Project
	Image
	MachineType
	AddressPool
	HostEnvironment
*/
package host

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import asset "chromium.googlesource.com/enterprise/cel/go/asset"
import compute "chromium.googlesource.com/enterprise/cel/go/gcp/compute"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// GCP project hosting.
type Project struct {
	// The GCP project name.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The default zone to use when constructing resources. The |zone| also
	// implicitly defines the region.
	Zone string `protobuf:"bytes,2,opt,name=zone" json:"zone,omitempty"`
}

func (m *Project) Reset()                    { *m = Project{} }
func (m *Project) String() string            { return proto.CompactTextString(m) }
func (*Project) ProtoMessage()               {}
func (*Project) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Project) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Project) GetZone() string {
	if m != nil {
		return m.Zone
	}
	return ""
}

// Describes a GCE source disk image. See
// https://cloud.google.com/compute/docs/images#image_families
type Image struct {
	// Name of the image. Used within the host environment schema to refer to
	// this image.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// The GCP project providing the image.
	Project string `protobuf:"bytes,2,opt,name=project" json:"project,omitempty"`
	// The GCP Image family name. Combined with the |project| field, the |family|
	// is used to locate the GCP image family. If the |url| is not specified,
	// then the resolver will pick the latest available image from this family
	// and populate the URL with it.
	Family string `protobuf:"bytes,3,opt,name=family" json:"family,omitempty"`
	// The full or partial URL to the disk image. If this is specified, then the
	// |project| and |family| values are ignored.
	Url string `protobuf:"bytes,4,opt,name=url" json:"url,omitempty"`
}

func (m *Image) Reset()                    { *m = Image{} }
func (m *Image) String() string            { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()               {}
func (*Image) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Image) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Image) GetProject() string {
	if m != nil {
		return m.Project
	}
	return ""
}

func (m *Image) GetFamily() string {
	if m != nil {
		return m.Family
	}
	return ""
}

func (m *Image) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

// Describes a type of machine (virtual or otherwise).
type MachineType struct {
	// Name is used to match machine type name from asset description.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// One of the following will be used to resolve this machine type.
	//
	// Types that are valid to be assigned to Base:
	//	*MachineType_InstanceProperties
	//	*MachineType_InstanceTemplate
	Base isMachineType_Base `protobuf_oneof:"base"`
}

func (m *MachineType) Reset()                    { *m = MachineType{} }
func (m *MachineType) String() string            { return proto.CompactTextString(m) }
func (*MachineType) ProtoMessage()               {}
func (*MachineType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type isMachineType_Base interface {
	isMachineType_Base()
}

type MachineType_InstanceProperties struct {
	InstanceProperties *compute.InstanceProperties `protobuf:"bytes,5,opt,name=instance_properties,json=instanceProperties,oneof"`
}
type MachineType_InstanceTemplate struct {
	InstanceTemplate string `protobuf:"bytes,6,opt,name=instance_template,json=instanceTemplate,oneof"`
}

func (*MachineType_InstanceProperties) isMachineType_Base() {}
func (*MachineType_InstanceTemplate) isMachineType_Base()   {}

func (m *MachineType) GetBase() isMachineType_Base {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *MachineType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MachineType) GetInstanceProperties() *compute.InstanceProperties {
	if x, ok := m.GetBase().(*MachineType_InstanceProperties); ok {
		return x.InstanceProperties
	}
	return nil
}

func (m *MachineType) GetInstanceTemplate() string {
	if x, ok := m.GetBase().(*MachineType_InstanceTemplate); ok {
		return x.InstanceTemplate
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*MachineType) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _MachineType_OneofMarshaler, _MachineType_OneofUnmarshaler, _MachineType_OneofSizer, []interface{}{
		(*MachineType_InstanceProperties)(nil),
		(*MachineType_InstanceTemplate)(nil),
	}
}

func _MachineType_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*MachineType)
	// base
	switch x := m.Base.(type) {
	case *MachineType_InstanceProperties:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.InstanceProperties); err != nil {
			return err
		}
	case *MachineType_InstanceTemplate:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.InstanceTemplate)
	case nil:
	default:
		return fmt.Errorf("MachineType.Base has unexpected type %T", x)
	}
	return nil
}

func _MachineType_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*MachineType)
	switch tag {
	case 5: // base.instance_properties
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(compute.InstanceProperties)
		err := b.DecodeMessage(msg)
		m.Base = &MachineType_InstanceProperties{msg}
		return true, err
	case 6: // base.instance_template
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Base = &MachineType_InstanceTemplate{x}
		return true, err
	default:
		return false, nil
	}
}

func _MachineType_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*MachineType)
	// base
	switch x := m.Base.(type) {
	case *MachineType_InstanceProperties:
		s := proto.Size(x.InstanceProperties)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *MachineType_InstanceTemplate:
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.InstanceTemplate)))
		n += len(x.InstanceTemplate)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// Describes an external address pool.
type AddressPool struct {
	// Name of address pool. Used for matching incoming references from an asset
	// description.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Static literal addresses.
	FixedAddress []*asset.Address `protobuf:"bytes,2,rep,name=fixed_address,json=fixedAddress" json:"fixed_address,omitempty"`
	// GCE reserved addresses by exact address name. Should refer to external addresses.
	ReservedAddress []string `protobuf:"bytes,3,rep,name=reserved_address,json=reservedAddress" json:"reserved_address,omitempty"`
	// GCE reserved addresses by regex. The provided regular expression must
	// match the entire name. The reserved address must be an external address.
	//
	// E.g.:
	//     reserved_address_regex: "foo.*"
	// ... matches "foobar", but not "egfoox"
	ReservedAddressRegex []string `protobuf:"bytes,4,rep,name=reserved_address_regex,json=reservedAddressRegex" json:"reserved_address_regex,omitempty"`
}

func (m *AddressPool) Reset()                    { *m = AddressPool{} }
func (m *AddressPool) String() string            { return proto.CompactTextString(m) }
func (*AddressPool) ProtoMessage()               {}
func (*AddressPool) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AddressPool) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AddressPool) GetFixedAddress() []*asset.Address {
	if m != nil {
		return m.FixedAddress
	}
	return nil
}

func (m *AddressPool) GetReservedAddress() []string {
	if m != nil {
		return m.ReservedAddress
	}
	return nil
}

func (m *AddressPool) GetReservedAddressRegex() []string {
	if m != nil {
		return m.ReservedAddressRegex
	}
	return nil
}

type HostEnvironment struct {
	Project     *Project       `protobuf:"bytes,1,opt,name=project" json:"project,omitempty"`
	MachineType []*MachineType `protobuf:"bytes,10,rep,name=machine_type,json=machineType" json:"machine_type,omitempty"`
	AddressPool []*AddressPool `protobuf:"bytes,11,rep,name=address_pool,json=addressPool" json:"address_pool,omitempty"`
	Image       []*Image       `protobuf:"bytes,12,rep,name=image" json:"image,omitempty"`
}

func (m *HostEnvironment) Reset()                    { *m = HostEnvironment{} }
func (m *HostEnvironment) String() string            { return proto.CompactTextString(m) }
func (*HostEnvironment) ProtoMessage()               {}
func (*HostEnvironment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *HostEnvironment) GetProject() *Project {
	if m != nil {
		return m.Project
	}
	return nil
}

func (m *HostEnvironment) GetMachineType() []*MachineType {
	if m != nil {
		return m.MachineType
	}
	return nil
}

func (m *HostEnvironment) GetAddressPool() []*AddressPool {
	if m != nil {
		return m.AddressPool
	}
	return nil
}

func (m *HostEnvironment) GetImage() []*Image {
	if m != nil {
		return m.Image
	}
	return nil
}

func init() {
	proto.RegisterType((*Project)(nil), "host.Project")
	proto.RegisterType((*Image)(nil), "host.Image")
	proto.RegisterType((*MachineType)(nil), "host.MachineType")
	proto.RegisterType((*AddressPool)(nil), "host.AddressPool")
	proto.RegisterType((*HostEnvironment)(nil), "host.HostEnvironment")
}

func init() { proto.RegisterFile("schema/host/host_environment.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 486 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0xdf, 0x6e, 0xd3, 0x30,
	0x14, 0xc6, 0x97, 0xb5, 0xeb, 0xb4, 0x93, 0x8e, 0x75, 0x01, 0x4d, 0x56, 0xb9, 0x29, 0x11, 0x12,
	0xe5, 0x62, 0x09, 0x74, 0x7d, 0x01, 0x26, 0x21, 0x75, 0x17, 0xa0, 0x2a, 0xda, 0x15, 0x37, 0x91,
	0x97, 0x9e, 0xa5, 0x86, 0xf8, 0x8f, 0x6c, 0x77, 0xac, 0x3c, 0x11, 0x6f, 0xc0, 0x33, 0xf0, 0x56,
	0x28, 0x8e, 0xb3, 0x46, 0xa3, 0x37, 0xad, 0x7d, 0xce, 0xef, 0xf3, 0xbf, 0xef, 0x0b, 0xc4, 0xa6,
	0x58, 0x23, 0xa7, 0xe9, 0x5a, 0x1a, 0xeb, 0x7e, 0x72, 0x14, 0x0f, 0x4c, 0x4b, 0xc1, 0x51, 0xd8,
	0x44, 0x69, 0x69, 0x65, 0xd4, 0xaf, 0xeb, 0xe3, 0xb1, 0x27, 0xa9, 0x31, 0x68, 0x53, 0x81, 0xf6,
	0xa7, 0xd4, 0x3f, 0x1a, 0x62, 0xfc, 0xd6, 0xf7, 0xca, 0x42, 0xa5, 0x85, 0xe4, 0x6a, 0x63, 0xb1,
	0xfd, 0xbf, 0xa4, 0x8a, 0x35, 0x54, 0xfc, 0x11, 0x8e, 0x97, 0x5a, 0x7e, 0xc7, 0xc2, 0x46, 0x11,
	0xf4, 0x05, 0xe5, 0x48, 0x82, 0x49, 0x30, 0x3d, 0xc9, 0xdc, 0xb8, 0xae, 0xfd, 0x92, 0x02, 0xc9,
	0x61, 0x53, 0xab, 0xc7, 0x71, 0x0e, 0x47, 0x37, 0x9c, 0x96, 0xb8, 0x57, 0x40, 0xe0, 0x58, 0x35,
	0xeb, 0x79, 0x4d, 0x3b, 0x8d, 0x2e, 0x60, 0x70, 0x4f, 0x39, 0xab, 0xb6, 0xa4, 0xe7, 0x1a, 0x7e,
	0x16, 0x8d, 0xa0, 0xb7, 0xd1, 0x15, 0xe9, 0xbb, 0x62, 0x3d, 0x8c, 0x7f, 0x07, 0x10, 0x7e, 0xa1,
	0xc5, 0x9a, 0x09, 0xbc, 0xdd, 0xaa, 0xfd, 0xfb, 0x7c, 0x85, 0x97, 0x4c, 0x18, 0x4b, 0x45, 0x81,
	0xb9, 0xd2, 0x52, 0xa1, 0xb6, 0x0c, 0x0d, 0x39, 0x9a, 0x04, 0xd3, 0x70, 0xf6, 0x3a, 0xf1, 0x17,
	0x4d, 0x6e, 0x3c, 0xb3, 0x7c, 0x42, 0x16, 0x07, 0x59, 0xc4, 0xfe, 0xab, 0x46, 0x97, 0x70, 0xfe,
	0xb4, 0x9e, 0x45, 0xae, 0x2a, 0x6a, 0x91, 0x0c, 0xea, 0x0d, 0x17, 0x07, 0xd9, 0xa8, 0x6d, 0xdd,
	0xfa, 0xce, 0xf5, 0x00, 0xfa, 0x77, 0xd4, 0x60, 0xfc, 0x27, 0x80, 0xf0, 0xd3, 0x6a, 0xa5, 0xd1,
	0x98, 0xa5, 0x94, 0xd5, 0xde, 0xa3, 0x5e, 0xc1, 0xe9, 0x3d, 0x7b, 0xc4, 0x55, 0x4e, 0x1b, 0x90,
	0x1c, 0x4e, 0x7a, 0xd3, 0x70, 0xf6, 0x22, 0x71, 0xae, 0x25, 0x5e, 0x9e, 0x0d, 0x1d, 0xe4, 0x67,
	0xd1, 0x7b, 0x18, 0x69, 0x34, 0xa8, 0x1f, 0x3a, 0xba, 0xde, 0xa4, 0x37, 0x3d, 0xc9, 0xce, 0xda,
	0x7a, 0x8b, 0xce, 0xe1, 0xe2, 0x39, 0x9a, 0x6b, 0x2c, 0xf1, 0x91, 0xf4, 0x9d, 0xe0, 0xd5, 0x33,
	0x41, 0x56, 0xf7, 0xe2, 0xbf, 0x01, 0x9c, 0x2d, 0xa4, 0xb1, 0x9f, 0x77, 0xd1, 0x8a, 0xde, 0xed,
	0xcc, 0x0b, 0xdc, 0x43, 0x9e, 0x26, 0x75, 0xcc, 0x12, 0x9f, 0x90, 0x9d, 0x97, 0x73, 0x18, 0xf2,
	0xc6, 0xa0, 0xdc, 0x6e, 0x15, 0x12, 0x70, 0x37, 0x3a, 0x6f, 0xe8, 0x8e, 0x75, 0x59, 0xc8, 0x3b,
	0x3e, 0xce, 0x61, 0xd8, 0x9e, 0x4f, 0x49, 0x59, 0x91, 0xb0, 0xab, 0xea, 0xbc, 0x62, 0x16, 0xd2,
	0xce, 0x93, 0xbe, 0x81, 0x23, 0x56, 0xc7, 0x8d, 0x0c, 0x1d, 0x1e, 0x36, 0xb8, 0x4b, 0x60, 0xd6,
	0x74, 0xae, 0x67, 0xdf, 0x3e, 0x14, 0x6b, 0x2d, 0x39, 0xdb, 0xf0, 0xa4, 0x94, 0xb2, 0xac, 0xd0,
	0xc8, 0x8d, 0x2e, 0xb0, 0x8e, 0x41, 0x8a, 0xc2, 0xa2, 0x56, 0x9a, 0x19, 0x4c, 0x0b, 0xac, 0xd2,
	0x52, 0xba, 0x4f, 0xea, 0x6e, 0xe0, 0xf2, 0x7f, 0xf5, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x74, 0x80,
	0xcb, 0x5f, 0x6d, 0x03, 0x00, 0x00,
}
