// Code generated by protoc-gen-go.
// source: schema/asset/dns.proto
// DO NOT EDIT!

package asset

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "chromium.googlesource.com/enterprise/cel/go/common"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// DNSZone describes a DNS zone. Conceptually it encompasses the same
// information included in a DNS zone file as described in
// https://en.wikipedia.org/wiki/Zone_file
type DNSZone struct {
	// Origin described by zone. E.g. foo.example.com.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// DNS records that should be included in the zone.
	Record []*DNSRecord `protobuf:"bytes,2,rep,name=record" json:"record,omitempty"`
}

func (m *DNSZone) Reset()                    { *m = DNSZone{} }
func (m *DNSZone) String() string            { return proto.CompactTextString(m) }
func (*DNSZone) ProtoMessage()               {}
func (*DNSZone) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *DNSZone) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DNSZone) GetRecord() []*DNSRecord {
	if m != nil {
		return m.Record
	}
	return nil
}

// DNSRecord describes a single DNS record in a Zone.
type DNSRecord struct {
	// Name on record.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// TTL in seconds.
	Ttl int32 `protobuf:"varint,2,opt,name=ttl" json:"ttl,omitempty"`
	// Must be omitted or is always IN.
	RecordClass string `protobuf:"bytes,3,opt,name=record_class,json=recordClass" json:"record_class,omitempty"`
	// Type of record. E.g. A, AAAA, NS, MX, ...
	RecordType string `protobuf:"bytes,4,opt,name=record_type,json=recordType" json:"record_type,omitempty"`
	// Priority value.
	Priority int32 `protobuf:"varint,5,opt,name=priority" json:"priority,omitempty"`
	// Answer section.
	Answer string `protobuf:"bytes,6,opt,name=answer" json:"answer,omitempty"`
}

func (m *DNSRecord) Reset()                    { *m = DNSRecord{} }
func (m *DNSRecord) String() string            { return proto.CompactTextString(m) }
func (*DNSRecord) ProtoMessage()               {}
func (*DNSRecord) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *DNSRecord) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DNSRecord) GetTtl() int32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func (m *DNSRecord) GetRecordClass() string {
	if m != nil {
		return m.RecordClass
	}
	return ""
}

func (m *DNSRecord) GetRecordType() string {
	if m != nil {
		return m.RecordType
	}
	return ""
}

func (m *DNSRecord) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *DNSRecord) GetAnswer() string {
	if m != nil {
		return m.Answer
	}
	return ""
}

func init() {
	proto.RegisterType((*DNSZone)(nil), "asset.DNSZone")
	proto.RegisterType((*DNSRecord)(nil), "asset.DNSRecord")
}

func init() { proto.RegisterFile("schema/asset/dns.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 285 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xb1, 0x4e, 0xeb, 0x30,
	0x14, 0x86, 0x9b, 0x36, 0xc9, 0x6d, 0xdd, 0x3b, 0x20, 0x0f, 0xc8, 0x2a, 0x12, 0x0a, 0x5d, 0xc8,
	0x14, 0x0b, 0xfa, 0x06, 0xa5, 0x73, 0x91, 0x5c, 0xa6, 0x2e, 0x55, 0x70, 0x8f, 0xd2, 0x48, 0xb1,
	0x8f, 0x65, 0xbb, 0x42, 0x59, 0x79, 0x27, 0x1e, 0x82, 0xb7, 0x42, 0x49, 0x4c, 0x05, 0x12, 0xe3,
	0xf9, 0x7e, 0x9f, 0xcf, 0x3a, 0x3f, 0xb9, 0x76, 0xf2, 0x04, 0xaa, 0xe4, 0xa5, 0x73, 0xe0, 0xf9,
	0x51, 0xbb, 0xc2, 0x58, 0xf4, 0x48, 0x93, 0x1e, 0x2c, 0x6e, 0x42, 0x2c, 0x51, 0x29, 0xd4, 0x1c,
	0x8d, 0xaf, 0xf1, 0xfb, 0xcd, 0xf2, 0x99, 0xfc, 0xdb, 0x6c, 0x77, 0x7b, 0xd4, 0x40, 0x17, 0x24,
	0xd6, 0xa5, 0x02, 0x16, 0x65, 0x51, 0x3e, 0x5b, 0xa7, 0xef, 0x1f, 0x6c, 0x3c, 0x4d, 0x44, 0xcf,
	0x68, 0x4e, 0x52, 0x0b, 0x12, 0xed, 0x91, 0x8d, 0xb3, 0x49, 0x3e, 0x7f, 0xbc, 0x2a, 0x7a, 0x77,
	0xb1, 0xd9, 0xee, 0x44, 0xcf, 0x45, 0xc8, 0x97, 0x9f, 0x11, 0x99, 0x5d, 0xe8, 0x9f, 0xce, 0x38,
	0x38, 0x19, 0x99, 0x78, 0xdf, 0xb0, 0x71, 0x16, 0xe5, 0x49, 0x88, 0x46, 0xa2, 0x43, 0xf4, 0x8e,
	0xfc, 0x1f, 0x6c, 0x07, 0xd9, 0x94, 0xce, 0xb1, 0x49, 0xb7, 0x2d, 0xe6, 0x03, 0x7b, 0xea, 0x10,
	0xbd, 0x27, 0x61, 0x3c, 0xf8, 0xd6, 0x00, 0x8b, 0x7f, 0xf8, 0x47, 0x82, 0x0c, 0xd1, 0x4b, 0x6b,
	0xba, 0xab, 0xa6, 0xc6, 0xd6, 0x68, 0x6b, 0xdf, 0xb2, 0xa4, 0xfb, 0x4a, 0x5c, 0x66, 0x7a, 0x4b,
	0xd2, 0x52, 0xbb, 0x37, 0xb0, 0x2c, 0xfd, 0xb5, 0x1f, 0xe8, 0x7a, 0xb5, 0x7f, 0x90, 0x27, 0x8b,
	0xaa, 0x3e, 0xab, 0xa2, 0x42, 0xac, 0x1a, 0x70, 0x78, 0xb6, 0x12, 0x0a, 0x89, 0x8a, 0x83, 0xf6,
	0x60, 0x8d, 0xad, 0x1d, 0x70, 0x09, 0x0d, 0xaf, 0x70, 0xe8, 0xff, 0x35, 0xed, 0x8b, 0x5d, 0x7d,
	0x05, 0x00, 0x00, 0xff, 0xff, 0x22, 0xed, 0xfd, 0x16, 0x96, 0x01, 0x00, 0x00,
}
