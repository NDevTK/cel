// Code generated by protoc-gen-go.
// source: schema/asset/asset_manifest.proto
// DO NOT EDIT!

package asset

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// AssetManifest is the main container for all top level assets that go into an
// asset manifest and can be identified by name. Please refer to each
// individual message for naming and other requirements.
//
// The intended use for this message is to act as the primary message into
// which text format protobufs can be deserialized when reading configuration
// files. I.e., a file could be formatted as follows:
//
//     network: { name: 'foo' }
//     dns_zone: {
//       origin: 'foo.example.'
//       record: {
//         name: 'bar'
//         ttl: 3600
//         record_type: 'A'
//         answer: '10.10.2.20'
//       }
//     }
//
// This file can be parsed into an AssetManifest message. Furthermore, multiple
// such messages can be concatenated without losing information.  The latter
// property is important since it allows a single asset manifest to be
// distributed across a number of files.
//
// The manner in which the names appear in a text format protobuf should
// underscore the style descision to use singular forms when naming repeated
// fields.
type AssetManifest struct {
	// Core networking. Use field numbers 1-99
	Network []*Network `protobuf:"bytes,1,rep,name=network" json:"network,omitempty"`
	DnsZone []*DNSZone `protobuf:"bytes,2,rep,name=dns_zone,json=dnsZone" json:"dns_zone,omitempty"`
	// Windows and ActiveDirectory. Use field numbers 100-199
	AdDomain             []*ActiveDirectoryDomain             `protobuf:"bytes,100,rep,name=ad_domain,json=adDomain" json:"ad_domain,omitempty"`
	AdDomainController   []*ActiveDirectoryDomainController   `protobuf:"bytes,101,rep,name=ad_domain_controller,json=adDomainController" json:"ad_domain_controller,omitempty"`
	AdOrganizationalUnit []*ActiveDirectoryOrganizationalUnit `protobuf:"bytes,102,rep,name=ad_organizational_unit,json=adOrganizationalUnit" json:"ad_organizational_unit,omitempty"`
	AdGroupPolicy        []*ActiveDirectoryGroupPolicy        `protobuf:"bytes,103,rep,name=ad_group_policy,json=adGroupPolicy" json:"ad_group_policy,omitempty"`
	AdGroupPolicyLink    []*ActiveDirectoryGroupPolicyLink    `protobuf:"bytes,104,rep,name=ad_group_policy_link,json=adGroupPolicyLink" json:"ad_group_policy_link,omitempty"`
	AdRegistryPolicy     []*ActiveDirectoryRegistryPolicy     `protobuf:"bytes,105,rep,name=ad_registry_policy,json=adRegistryPolicy" json:"ad_registry_policy,omitempty"`
	AdRegistryPrefPolicy []*ActiveDirectoryRegistryPrefPolicy `protobuf:"bytes,106,rep,name=ad_registry_pref_policy,json=adRegistryPrefPolicy" json:"ad_registry_pref_policy,omitempty"`
	WindowsGroup         []*WindowsGroup                      `protobuf:"bytes,107,rep,name=windows_group,json=windowsGroup" json:"windows_group,omitempty"`
	WindowsMachine       []*WindowsMachine                    `protobuf:"bytes,108,rep,name=windows_machine,json=windowsMachine" json:"windows_machine,omitempty"`
	WindowsUser          []*WindowsUser                       `protobuf:"bytes,109,rep,name=windows_user,json=windowsUser" json:"windows_user,omitempty"`
	// PKI. Use field numbers 200-299
	Certificate     []*Certificate     `protobuf:"bytes,200,rep,name=certificate" json:"certificate,omitempty"`
	CertificatePool []*CertificatePool `protobuf:"bytes,201,rep,name=certificate_pool,json=certificatePool" json:"certificate_pool,omitempty"`
	// IIS. Use field numbers 300-399
	IisApplication []*IISApplication `protobuf:"bytes,300,rep,name=iis_application,json=iisApplication" json:"iis_application,omitempty"`
	IisServer      []*IISServer      `protobuf:"bytes,301,rep,name=iis_server,json=iisServer" json:"iis_server,omitempty"`
	IisSite        []*IISSite        `protobuf:"bytes,302,rep,name=iis_site,json=iisSite" json:"iis_site,omitempty"`
}

func (m *AssetManifest) Reset()                    { *m = AssetManifest{} }
func (m *AssetManifest) String() string            { return proto.CompactTextString(m) }
func (*AssetManifest) ProtoMessage()               {}
func (*AssetManifest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *AssetManifest) GetNetwork() []*Network {
	if m != nil {
		return m.Network
	}
	return nil
}

func (m *AssetManifest) GetDnsZone() []*DNSZone {
	if m != nil {
		return m.DnsZone
	}
	return nil
}

func (m *AssetManifest) GetAdDomain() []*ActiveDirectoryDomain {
	if m != nil {
		return m.AdDomain
	}
	return nil
}

func (m *AssetManifest) GetAdDomainController() []*ActiveDirectoryDomainController {
	if m != nil {
		return m.AdDomainController
	}
	return nil
}

func (m *AssetManifest) GetAdOrganizationalUnit() []*ActiveDirectoryOrganizationalUnit {
	if m != nil {
		return m.AdOrganizationalUnit
	}
	return nil
}

func (m *AssetManifest) GetAdGroupPolicy() []*ActiveDirectoryGroupPolicy {
	if m != nil {
		return m.AdGroupPolicy
	}
	return nil
}

func (m *AssetManifest) GetAdGroupPolicyLink() []*ActiveDirectoryGroupPolicyLink {
	if m != nil {
		return m.AdGroupPolicyLink
	}
	return nil
}

func (m *AssetManifest) GetAdRegistryPolicy() []*ActiveDirectoryRegistryPolicy {
	if m != nil {
		return m.AdRegistryPolicy
	}
	return nil
}

func (m *AssetManifest) GetAdRegistryPrefPolicy() []*ActiveDirectoryRegistryPrefPolicy {
	if m != nil {
		return m.AdRegistryPrefPolicy
	}
	return nil
}

func (m *AssetManifest) GetWindowsGroup() []*WindowsGroup {
	if m != nil {
		return m.WindowsGroup
	}
	return nil
}

func (m *AssetManifest) GetWindowsMachine() []*WindowsMachine {
	if m != nil {
		return m.WindowsMachine
	}
	return nil
}

func (m *AssetManifest) GetWindowsUser() []*WindowsUser {
	if m != nil {
		return m.WindowsUser
	}
	return nil
}

func (m *AssetManifest) GetCertificate() []*Certificate {
	if m != nil {
		return m.Certificate
	}
	return nil
}

func (m *AssetManifest) GetCertificatePool() []*CertificatePool {
	if m != nil {
		return m.CertificatePool
	}
	return nil
}

func (m *AssetManifest) GetIisApplication() []*IISApplication {
	if m != nil {
		return m.IisApplication
	}
	return nil
}

func (m *AssetManifest) GetIisServer() []*IISServer {
	if m != nil {
		return m.IisServer
	}
	return nil
}

func (m *AssetManifest) GetIisSite() []*IISSite {
	if m != nil {
		return m.IisSite
	}
	return nil
}

func init() {
	proto.RegisterType((*AssetManifest)(nil), "asset.AssetManifest")
}

func init() { proto.RegisterFile("schema/asset/asset_manifest.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 620 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0x5d, 0x4f, 0x14, 0x3b,
	0x18, 0xc7, 0x03, 0x27, 0xe7, 0xb0, 0x94, 0x03, 0x8b, 0x15, 0xa1, 0xd9, 0x78, 0x21, 0xbe, 0x05,
	0xbd, 0xd8, 0x55, 0x09, 0x89, 0xde, 0x68, 0x78, 0x49, 0x0c, 0x89, 0x20, 0x29, 0x41, 0x0d, 0x17,
	0x36, 0x75, 0xfa, 0xec, 0xee, 0xe3, 0xce, 0xb4, 0x9b, 0xb6, 0xcb, 0x06, 0x3e, 0x93, 0xfa, 0x39,
	0xf4, 0x3b, 0x79, 0x61, 0xa6, 0x33, 0xb3, 0x3b, 0x0d, 0x1b, 0xbc, 0x99, 0xf4, 0xf9, 0xbf, 0xfc,
	0xd2, 0x36, 0x99, 0x92, 0x4d, 0x97, 0xf4, 0x21, 0x93, 0x1d, 0xe9, 0x1c, 0xf8, 0xe2, 0x2b, 0x32,
	0xa9, 0xb1, 0x0b, 0xce, 0xb7, 0x87, 0xd6, 0x78, 0x43, 0xff, 0x0d, 0x6a, 0xeb, 0x41, 0x9c, 0x4c,
	0x3c, 0x5e, 0x80, 0x50, 0x68, 0x21, 0xf1, 0xc6, 0x5e, 0x16, 0xd9, 0xd6, 0x46, 0x14, 0x4a, 0xc0,
	0x96, 0x90, 0xd6, 0x7a, 0x64, 0x28, 0xed, 0x66, 0xea, 0x88, 0x95, 0xde, 0x8a, 0x74, 0x0d, 0x7e,
	0x6c, 0xec, 0xa0, 0xf0, 0xee, 0xff, 0x6e, 0x90, 0xe5, 0xdd, 0x5c, 0x3f, 0x2a, 0x37, 0x4a, 0xb7,
	0xc8, 0x42, 0x19, 0x61, 0x73, 0xf7, 0xfe, 0xd9, 0x5a, 0x7a, 0xb1, 0xd2, 0x0e, 0xc5, 0xf6, 0x71,
	0xa1, 0xf2, 0xca, 0xa6, 0x4f, 0x48, 0x43, 0x69, 0x27, 0xae, 0x8c, 0x06, 0x36, 0x1f, 0x45, 0x0f,
	0x8e, 0x4f, 0xcf, 0x8d, 0x06, 0xbe, 0xa0, 0xb4, 0xcb, 0x17, 0xf4, 0x15, 0x59, 0x94, 0x4a, 0x28,
	0x93, 0x49, 0xd4, 0x4c, 0x85, 0xec, 0xdd, 0x32, 0xbb, 0x1b, 0x4e, 0x7f, 0x50, 0x1d, 0xfe, 0x20,
	0x64, 0x78, 0x43, 0xaa, 0x62, 0x45, 0x3f, 0x91, 0xb5, 0x49, 0x55, 0x24, 0x46, 0x7b, 0x6b, 0xd2,
	0x14, 0x2c, 0x83, 0x40, 0x79, 0x7c, 0x13, 0x65, 0x7f, 0x92, 0xe6, 0xb4, 0xe2, 0x4d, 0x35, 0xfa,
	0x99, 0xac, 0x4b, 0x25, 0x8c, 0xed, 0x49, 0x8d, 0x57, 0xd2, 0xa3, 0xd1, 0x32, 0x15, 0x23, 0x8d,
	0x9e, 0x75, 0x03, 0x7b, 0x6b, 0x36, 0xfb, 0x7d, 0x54, 0x38, 0xd3, 0xe8, 0xf9, 0x9a, 0x54, 0xd7,
	0x55, 0x7a, 0x48, 0x9a, 0x52, 0x89, 0x9e, 0x35, 0xa3, 0xa1, 0x18, 0x9a, 0x14, 0x93, 0x4b, 0xd6,
	0x0b, 0xe0, 0xcd, 0xd9, 0xe0, 0xb7, 0x79, 0xf2, 0x24, 0x04, 0xf9, 0xb2, 0x54, 0xb5, 0x91, 0x7e,
	0x08, 0x97, 0x50, 0x47, 0x89, 0x14, 0xf5, 0x80, 0xf5, 0x03, 0xef, 0xd1, 0x5f, 0x79, 0xef, 0x50,
	0x0f, 0xf8, 0xad, 0x88, 0x99, 0x4b, 0x94, 0x13, 0x2a, 0x95, 0xb0, 0xd0, 0x43, 0xe7, 0xed, 0x65,
	0xb5, 0x4b, 0x0c, 0xd4, 0x87, 0xb3, 0xa9, 0xbc, 0x0c, 0x97, 0x1b, 0x5d, 0x95, 0x2a, 0x56, 0xa8,
	0x20, 0x1b, 0x11, 0xd3, 0x42, 0xb7, 0x02, 0x7f, 0xbd, 0xe9, 0x5e, 0x27, 0x18, 0x0b, 0xdd, 0x12,
	0xbe, 0x56, 0x83, 0x4f, 0x54, 0xfa, 0x92, 0x2c, 0x8f, 0x51, 0x2b, 0x33, 0x76, 0xc5, 0x8d, 0xb0,
	0x41, 0xc0, 0xde, 0x2e, 0xb1, 0x1f, 0x0b, 0x2f, 0x1c, 0x95, 0xff, 0x3f, 0xae, 0x4d, 0xf4, 0x35,
	0x69, 0x56, 0xcd, 0x4c, 0x26, 0x7d, 0xd4, 0xc0, 0xd2, 0xd0, 0xbd, 0x13, 0x77, 0x8f, 0x0a, 0x93,
	0xaf, 0x8c, 0xa3, 0x99, 0xee, 0x90, 0x8a, 0x27, 0x46, 0x0e, 0x2c, 0xcb, 0x42, 0x99, 0xc6, 0xe5,
	0x33, 0x07, 0x96, 0x2f, 0x8d, 0xa7, 0x03, 0xdd, 0x21, 0x4b, 0xf9, 0xef, 0x8b, 0x5d, 0x4c, 0xa4,
	0x07, 0xf6, 0x73, 0x2e, 0xaa, 0xed, 0x4f, 0x2d, 0x5e, 0xcf, 0xd1, 0x3d, 0xb2, 0x5a, 0x1b, 0xc5,
	0xd0, 0x98, 0x94, 0xfd, 0x2a, 0xba, 0xeb, 0xd7, 0xbb, 0x27, 0xc6, 0xa4, 0xbc, 0x99, 0xc4, 0x02,
	0x7d, 0x43, 0x9a, 0x88, 0x4e, 0xc8, 0xe1, 0x30, 0xcd, 0x45, 0x34, 0x9a, 0x7d, 0x9b, 0x8f, 0x8e,
	0x7c, 0x78, 0x78, 0xba, 0x3b, 0x75, 0xf9, 0x0a, 0xa2, 0xab, 0xcd, 0xf4, 0x19, 0x21, 0x39, 0xc0,
	0x81, 0xbd, 0x00, 0xcb, 0xbe, 0x17, 0xdd, 0xd5, 0x69, 0xf7, 0x34, 0x18, 0x7c, 0x11, 0xd1, 0x15,
	0x4b, 0xfa, 0x94, 0x34, 0x42, 0x03, 0x3d, 0xb0, 0x1f, 0xf1, 0xbb, 0x90, 0xe7, 0xd1, 0x03, 0x5f,
	0xc8, 0xd3, 0xe8, 0x61, 0x6f, 0xfb, 0xfc, 0x79, 0xd2, 0xb7, 0x26, 0xc3, 0x51, 0xd6, 0xee, 0x19,
	0xd3, 0x4b, 0xc1, 0x99, 0x91, 0x4d, 0xa0, 0x9d, 0x98, 0xac, 0x03, 0xda, 0x83, 0x1d, 0x5a, 0x74,
	0xd0, 0x49, 0x20, 0xed, 0xf4, 0x4c, 0xf1, 0x82, 0x7d, 0xf9, 0x2f, 0x3c, 0x5d, 0xdb, 0x7f, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x31, 0x58, 0x1c, 0x9b, 0x70, 0x05, 0x00, 0x00,
}
