// Code generated by protoc-gen-go.
// source: schema/asset/cert.proto
// DO NOT EDIT!

package asset

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common1 "chromium.googlesource.com/enterprise/cel/go/common"
import _ "chromium.googlesource.com/enterprise/cel/go/common"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// An x509 certificate.
type Certificate struct {
	// A convenient identifier for this certificate.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// PEM encoded file containing a *single* certificate, and no private key.
	Certficate *common1.FileReference `protobuf:"bytes,2,opt,name=certficate" json:"certficate,omitempty"`
	// PEM encoded private key. Optional.
	PrivateKey *common1.FileReference `protobuf:"bytes,3,opt,name=private_key,json=privateKey" json:"private_key,omitempty"`
}

func (m *Certificate) Reset()                    { *m = Certificate{} }
func (m *Certificate) String() string            { return proto.CompactTextString(m) }
func (*Certificate) ProtoMessage()               {}
func (*Certificate) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Certificate) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Certificate) GetCertficate() *common1.FileReference {
	if m != nil {
		return m.Certficate
	}
	return nil
}

func (m *Certificate) GetPrivateKey() *common1.FileReference {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

// A pool of certifiates. Usually used to establish a set of trust roots.
type CertificatePool struct {
	// A convenient identifier for this certificate pool
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Named certificates. Should match one of the |Certificate| entries
	// specified in this manifest.
	IncludeNamed []string `protobuf:"bytes,2,rep,name=include_named,json=includeNamed" json:"include_named,omitempty"`
	// PEM encoded file containing one or more certificates. Note that private
	// keys cannot be specified this way.
	IncludeFile []*common1.FileReference `protobuf:"bytes,3,rep,name=include_file,json=includeFile" json:"include_file,omitempty"`
}

func (m *CertificatePool) Reset()                    { *m = CertificatePool{} }
func (m *CertificatePool) String() string            { return proto.CompactTextString(m) }
func (*CertificatePool) ProtoMessage()               {}
func (*CertificatePool) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *CertificatePool) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CertificatePool) GetIncludeNamed() []string {
	if m != nil {
		return m.IncludeNamed
	}
	return nil
}

func (m *CertificatePool) GetIncludeFile() []*common1.FileReference {
	if m != nil {
		return m.IncludeFile
	}
	return nil
}

func init() {
	proto.RegisterType((*Certificate)(nil), "asset.Certificate")
	proto.RegisterType((*CertificatePool)(nil), "asset.CertificatePool")
}

func init() { proto.RegisterFile("schema/asset/cert.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 299 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x86, 0xdd, 0x5d, 0x2d, 0x6d, 0x56, 0x29, 0x44, 0xc4, 0xa0, 0x97, 0xa5, 0xa7, 0x9e, 0x36,
	0x68, 0x41, 0x7a, 0xf1, 0x52, 0xc1, 0x8b, 0x20, 0xb2, 0x47, 0x2f, 0x65, 0x4d, 0x67, 0xdb, 0x60,
	0x92, 0x59, 0x92, 0x54, 0xe8, 0xb5, 0x4f, 0xa1, 0x0f, 0xd2, 0xf7, 0x93, 0xec, 0xae, 0x58, 0x44,
	0xbd, 0x65, 0xe6, 0xff, 0xfe, 0xc9, 0xcf, 0x0c, 0x39, 0x77, 0x62, 0x05, 0xba, 0xe4, 0xa5, 0x73,
	0xe0, 0xb9, 0x00, 0xeb, 0xf3, 0xda, 0xa2, 0x47, 0x7a, 0xd4, 0x74, 0x2e, 0x2e, 0x3b, 0x5d, 0xa0,
	0xd6, 0x68, 0x78, 0x25, 0x15, 0x58, 0xa8, 0x5a, 0xe6, 0xa7, 0x88, 0xb5, 0x97, 0x68, 0x5c, 0x2b,
	0x8e, 0xde, 0x23, 0x92, 0xde, 0x81, 0xf5, 0xb2, 0x92, 0xa2, 0xf4, 0x40, 0x29, 0x39, 0x34, 0xa5,
	0x06, 0x16, 0x65, 0xd1, 0x78, 0x50, 0x34, 0x6f, 0x7a, 0x4b, 0x48, 0xf8, 0xb2, 0x25, 0x58, 0x9c,
	0x45, 0xe3, 0xf4, 0xfa, 0x2c, 0x6f, 0xc7, 0xe5, 0xf7, 0x52, 0x41, 0x01, 0x15, 0x58, 0x30, 0x02,
	0x66, 0xbd, 0xed, 0x8e, 0xc5, 0xfd, 0x83, 0x62, 0xcf, 0x40, 0x6f, 0x48, 0x5a, 0x5b, 0xf9, 0x56,
	0x7a, 0x98, 0xbf, 0xc2, 0x86, 0x25, 0xff, 0xf8, 0x0b, 0xd2, 0x91, 0x0f, 0xb0, 0x19, 0x7d, 0x44,
	0x64, 0xb8, 0x17, 0xed, 0x09, 0x51, 0xfd, 0x1a, 0x6f, 0x4a, 0x4e, 0xa4, 0x11, 0x6a, 0xbd, 0x80,
	0x79, 0xa8, 0x17, 0x2c, 0xce, 0x92, 0xf1, 0x60, 0x76, 0xba, 0xdd, 0xb1, 0x61, 0x3f, 0xa6, 0xa9,
	0xf8, 0x9e, 0x51, 0x1c, 0x77, 0xe4, 0x63, 0x00, 0xe9, 0x94, 0x7c, 0xd5, 0xf3, 0xb0, 0x32, 0x96,
	0x64, 0xc9, 0xdf, 0xd1, 0xd2, 0x0e, 0x0d, 0xdd, 0xd9, 0xe4, 0xf9, 0x4a, 0xac, 0x2c, 0x6a, 0xb9,
	0xd6, 0xf9, 0x12, 0x71, 0xa9, 0xc0, 0xe1, 0xda, 0x0a, 0x08, 0x56, 0x0e, 0xc6, 0x83, 0xad, 0xad,
	0x74, 0xc0, 0x05, 0x28, 0xbe, 0xc4, 0xf6, 0x6e, 0x2f, 0xbd, 0x66, 0xe5, 0x93, 0xcf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xc8, 0x1e, 0x5c, 0x75, 0xce, 0x01, 0x00, 0x00,
}
