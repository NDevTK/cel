// Code generated by protoc-gen-go.
// source: schema/asset/iis.proto
// DO NOT EDIT!

package asset

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common1 "chromium.googlesource.com/enterprise/cel/go/common"
import _ "chromium.googlesource.com/enterprise/cel/go/common"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// An IIS server.
//
// The following Windows features will be automatically installed for all IIS servers.
//   *  Web-Common-HTTP
//   *  Web-Security
type IISServer struct {
	// Name of server instance.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Name of host machine. Should refer to a |WindowsMachine| entry.
	// Container information for the IIS instance will be inherited from the
	// WindowsMachine entry.
	WindowsMachine string `protobuf:"bytes,2,opt,name=windows_machine,json=windowsMachine" json:"windows_machine,omitempty"`
}

func (m *IISServer) Reset()                    { *m = IISServer{} }
func (m *IISServer) String() string            { return proto.CompactTextString(m) }
func (*IISServer) ProtoMessage()               {}
func (*IISServer) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *IISServer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *IISServer) GetWindowsMachine() string {
	if m != nil {
		return m.WindowsMachine
	}
	return ""
}

// Bindings for a website onto a webserver.
type IISBindings struct {
	// Hostname. Can be empty to bind to all hostnames.
	Hostname string `protobuf:"bytes,1,opt,name=hostname" json:"hostname,omitempty"`
	// Protocol. Must be either HTTP or HTTPS. If using HTTPS, the SSL
	// information is also required.
	Protocol Protocol `protobuf:"varint,2,opt,name=protocol,enum=asset.Protocol" json:"protocol,omitempty"`
	// Port to use. Leave empty to use the default port based on protocol.
	Port uint32 `protobuf:"varint,3,opt,name=port" json:"port,omitempty"`
	// Name of a Certificate. This certificate should include a private key. See
	// the definition in cert.proto.
	Certificate string `protobuf:"bytes,4,opt,name=certificate" json:"certificate,omitempty"`
	// Whether or not to use SNI. Only applicable when |protocol| is HTTPS. If
	// this value is false, then only one HTTPS site can be bound to a single
	// server.
	UseSni bool `protobuf:"varint,5,opt,name=use_sni,json=useSni" json:"use_sni,omitempty"`
}

func (m *IISBindings) Reset()                    { *m = IISBindings{} }
func (m *IISBindings) String() string            { return proto.CompactTextString(m) }
func (*IISBindings) ProtoMessage()               {}
func (*IISBindings) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *IISBindings) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *IISBindings) GetProtocol() Protocol {
	if m != nil {
		return m.Protocol
	}
	return Protocol_UNKNOWN
}

func (m *IISBindings) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *IISBindings) GetCertificate() string {
	if m != nil {
		return m.Certificate
	}
	return ""
}

func (m *IISBindings) GetUseSni() bool {
	if m != nil {
		return m.UseSni
	}
	return false
}

// A single web site.
type IISSite struct {
	// Name of site.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Name of server. Should refer to a |Server| entry. A single server can host
	// multiple sites as long as those sites use distinct binding information.
	IisServer string `protobuf:"bytes,2,opt,name=iis_server,json=iisServer" json:"iis_server,omitempty"`
	// Bindings. These are bindings. Specify bindings here. If left unset, will
	// use default bindings (HTTP, port 80, all hostnames).
	Bindings *IISBindings `protobuf:"bytes,3,opt,name=bindings" json:"bindings,omitempty"`
	// Relative path to directory containing the files that will be hosted on
	// this site. The entire subtree will be copied over to the target host.
	//
	// While it is legal, avoid nesting sites and applications within a single
	// directory tree.
	Contents *common1.FileReference `protobuf:"bytes,4,opt,name=contents" json:"contents,omitempty"`
}

func (m *IISSite) Reset()                    { *m = IISSite{} }
func (m *IISSite) String() string            { return proto.CompactTextString(m) }
func (*IISSite) ProtoMessage()               {}
func (*IISSite) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *IISSite) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *IISSite) GetIisServer() string {
	if m != nil {
		return m.IisServer
	}
	return ""
}

func (m *IISSite) GetBindings() *IISBindings {
	if m != nil {
		return m.Bindings
	}
	return nil
}

func (m *IISSite) GetContents() *common1.FileReference {
	if m != nil {
		return m.Contents
	}
	return nil
}

type IISApplication struct {
	// Name of application.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Name of the iis.Site that's hosting this application.
	IisSite string `protobuf:"bytes,2,opt,name=iis_site,json=iisSite" json:"iis_site,omitempty"`
	// Relative path to directory containing the files that will be hosted on
	// this application. The entire subtree will be copied over to the target
	// host.
	//
	// While it is legal, avoid nesting sites and applications within a single
	// directory tree.
	Contents *common1.FileReference `protobuf:"bytes,3,opt,name=contents" json:"contents,omitempty"`
	// Relative path to an optional web.config file that will override any
	// existing web.config in |contents|.
	WebConfigFile *common1.FileReference `protobuf:"bytes,4,opt,name=web_config_file,json=webConfigFile" json:"web_config_file,omitempty"`
	// Inline web.config contents. Any contents here will be merged with the
	// |web_config_file| if there is one, a web config file found in the top
	// level of |contents|.
	WebConfigString string `protobuf:"bytes,5,opt,name=web_config_string,json=webConfigString" json:"web_config_string,omitempty"`
}

func (m *IISApplication) Reset()                    { *m = IISApplication{} }
func (m *IISApplication) String() string            { return proto.CompactTextString(m) }
func (*IISApplication) ProtoMessage()               {}
func (*IISApplication) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *IISApplication) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *IISApplication) GetIisSite() string {
	if m != nil {
		return m.IisSite
	}
	return ""
}

func (m *IISApplication) GetContents() *common1.FileReference {
	if m != nil {
		return m.Contents
	}
	return nil
}

func (m *IISApplication) GetWebConfigFile() *common1.FileReference {
	if m != nil {
		return m.WebConfigFile
	}
	return nil
}

func (m *IISApplication) GetWebConfigString() string {
	if m != nil {
		return m.WebConfigString
	}
	return ""
}

func init() {
	proto.RegisterType((*IISServer)(nil), "asset.IISServer")
	proto.RegisterType((*IISBindings)(nil), "asset.IISBindings")
	proto.RegisterType((*IISSite)(nil), "asset.IISSite")
	proto.RegisterType((*IISApplication)(nil), "asset.IISApplication")
}

func init() { proto.RegisterFile("schema/asset/iis.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 495 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x96, 0xe9, 0x4f, 0x9c, 0x8d, 0x9a, 0xb4, 0x2b, 0xd2, 0x9a, 0xf4, 0x12, 0xe5, 0x14, 0x81,
	0x64, 0xab, 0xa9, 0x38, 0x21, 0x0e, 0x04, 0x84, 0xe4, 0x03, 0x12, 0x5a, 0xdf, 0xb8, 0x44, 0xc9,
	0x76, 0xe2, 0x8c, 0xb0, 0x77, 0xac, 0xdd, 0x0d, 0xbe, 0xe7, 0x9d, 0x22, 0xae, 0xbc, 0x13, 0x2f,
	0x80, 0xbc, 0x36, 0xc6, 0x54, 0x15, 0xe2, 0xe6, 0x9d, 0xf9, 0x66, 0xbf, 0x9f, 0x59, 0xb3, 0x6b,
	0x23, 0x77, 0x90, 0xaf, 0xa3, 0xb5, 0x31, 0x60, 0x23, 0x44, 0x13, 0x16, 0x9a, 0x2c, 0xf1, 0x33,
	0x57, 0x98, 0xdc, 0x36, 0x6d, 0x49, 0x79, 0x4e, 0x2a, 0xda, 0x62, 0x06, 0x1a, 0xb6, 0x35, 0x66,
	0x32, 0xf9, 0x6b, 0x56, 0x81, 0x2d, 0x49, 0x7f, 0x6d, 0x7a, 0x8f, 0x06, 0xa9, 0xb0, 0x48, 0xaa,
	0xb9, 0x7c, 0x06, 0xac, 0x1f, 0xc7, 0x49, 0x02, 0xfa, 0x1b, 0x68, 0xce, 0xd9, 0xa9, 0x5a, 0xe7,
	0x10, 0x78, 0x53, 0x6f, 0xde, 0x17, 0xee, 0x9b, 0x7f, 0x60, 0xa3, 0x12, 0xd5, 0x03, 0x95, 0x66,
	0x95, 0xaf, 0xe5, 0x0e, 0x15, 0x04, 0xcf, 0xaa, 0xf6, 0xf2, 0xf6, 0x70, 0x0c, 0x6e, 0xf8, 0xd8,
	0x31, 0x86, 0x8f, 0x20, 0x62, 0xd8, 0x14, 0x3e, 0xd5, 0xe7, 0xd9, 0x0f, 0x8f, 0x0d, 0xe2, 0x38,
	0x59, 0xa2, 0x7a, 0x40, 0x95, 0x1a, 0x3e, 0x61, 0xfe, 0x8e, 0x8c, 0xed, 0xb0, 0xb5, 0x67, 0xfe,
	0x8a, 0xf9, 0x4e, 0x9b, 0xa4, 0xcc, 0x51, 0x0d, 0x17, 0xa3, 0xb0, 0x66, 0xf9, 0xdc, 0x94, 0x45,
	0x0b, 0xa8, 0x24, 0x17, 0xa4, 0x6d, 0x70, 0x32, 0xf5, 0xe6, 0x17, 0xc2, 0x7d, 0xf3, 0x37, 0x6c,
	0x20, 0x41, 0x5b, 0xdc, 0xa2, 0x5c, 0x5b, 0x08, 0x4e, 0x9d, 0xdc, 0x17, 0x87, 0x63, 0x30, 0xe6,
	0x57, 0xf5, 0x45, 0xdd, 0xb6, 0x27, 0xba, 0x68, 0x7e, 0xc3, 0x7a, 0x7b, 0x03, 0x2b, 0xa3, 0x30,
	0x38, 0x9b, 0x7a, 0x73, 0x5f, 0x9c, 0xef, 0x0d, 0x24, 0x0a, 0x67, 0xdf, 0x3d, 0xd6, 0xab, 0xa2,
	0x42, 0x0b, 0x4f, 0x06, 0xf5, 0x9a, 0x31, 0x44, 0xb3, 0x32, 0x2e, 0xca, 0x26, 0xa3, 0xeb, 0xc3,
	0x31, 0xe0, 0xfc, 0xb2, 0x26, 0xfd, 0xd3, 0x15, 0x7d, 0x44, 0xd3, 0x64, 0x1e, 0x32, 0x7f, 0xd3,
	0xa4, 0xe2, 0x4c, 0x0c, 0x16, 0xbc, 0x71, 0xdb, 0xc9, 0x4b, 0xb4, 0x18, 0x7e, 0xc7, 0x7c, 0x49,
	0xca, 0x82, 0xb2, 0xc6, 0x39, 0x1b, 0x2c, 0xc6, 0x61, 0xbd, 0xd9, 0xf0, 0x23, 0x66, 0x20, 0x60,
	0x0b, 0x1a, 0x94, 0x04, 0xd1, 0xc2, 0x66, 0x3f, 0x3d, 0x36, 0x8c, 0xe3, 0xe4, 0x5d, 0x51, 0x64,
	0x95, 0x47, 0x24, 0xf5, 0xa4, 0x81, 0x88, 0xf9, 0x4e, 0x22, 0xda, 0xdf, 0x2b, 0x7e, 0x7e, 0x38,
	0x06, 0x97, 0x7c, 0xd8, 0x91, 0x8f, 0x16, 0x44, 0xaf, 0x12, 0x5f, 0xa5, 0xd0, 0x95, 0x72, 0xf2,
	0x5f, 0x52, 0xf8, 0x5b, 0x36, 0x2a, 0x61, 0xb3, 0x92, 0xa4, 0xb6, 0x98, 0xae, 0xaa, 0x37, 0xfc,
	0x6f, 0x13, 0x17, 0x25, 0x6c, 0xde, 0x3b, 0x70, 0x55, 0xe7, 0x2f, 0xd9, 0x55, 0x67, 0xdc, 0x58,
	0x8d, 0x2a, 0x75, 0x6b, 0xea, 0x8b, 0x51, 0x8b, 0x4c, 0x5c, 0x79, 0x79, 0xff, 0xe5, 0x4e, 0xee,
	0x34, 0xe5, 0xb8, 0xcf, 0xc3, 0x94, 0x28, 0xcd, 0xc0, 0xd0, 0x5e, 0x4b, 0xa8, 0x88, 0x22, 0x50,
	0x16, 0x74, 0xa1, 0xd1, 0x40, 0x24, 0x21, 0x8b, 0x52, 0xaa, 0xff, 0x9c, 0xcd, 0xb9, 0x7b, 0x58,
	0xf7, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb0, 0x49, 0x74, 0xb3, 0x8c, 0x03, 0x00, 0x00,
}
