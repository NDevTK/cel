// Code generated by protoc-gen-go.
// source: schema/asset/iis.proto
// DO NOT EDIT!

package asset

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Server struct {
	// Name of server instance.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Name of host machine. Should refer to a |WindowsMachine| entry.
	// Container information for the IIS instance will be inherited from the
	// WindowsMachine entry.
	Host string `protobuf:"bytes,2,opt,name=host" json:"host,omitempty"`
}

func (m *Server) Reset()                    { *m = Server{} }
func (m *Server) String() string            { return proto.CompactTextString(m) }
func (*Server) ProtoMessage()               {}
func (*Server) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *Server) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Server) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

// Bindings for a website onto a webserver.
type Bindings struct {
	// Hostname. Can be empty for all hostnames.
	Hostname string `protobuf:"bytes,1,opt,name=hostname" json:"hostname,omitempty"`
	// Protocol. Must be either HTTP or HTTPS. If using HTTPS, the SSL
	// information is also required.
	Protocol Protocol `protobuf:"varint,2,opt,name=protocol,enum=asset.Protocol" json:"protocol,omitempty"`
	// Port to use. Leave empty to use the default port based on protocol.
	Port uint32 `protobuf:"varint,3,opt,name=port" json:"port,omitempty"`
	// Name of a cert.Certificate.
	Certificate string `protobuf:"bytes,4,opt,name=certificate" json:"certificate,omitempty"`
	// Whether or not to use SNI. Only applicable when |protocol| is HTTPS. If
	// this value is false, then only one HTTPS site can be bound to a single
	// server.
	UseSni bool `protobuf:"varint,5,opt,name=use_sni,json=useSni" json:"use_sni,omitempty"`
}

func (m *Bindings) Reset()                    { *m = Bindings{} }
func (m *Bindings) String() string            { return proto.CompactTextString(m) }
func (*Bindings) ProtoMessage()               {}
func (*Bindings) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *Bindings) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *Bindings) GetProtocol() Protocol {
	if m != nil {
		return m.Protocol
	}
	return Protocol_UNKNOWN
}

func (m *Bindings) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Bindings) GetCertificate() string {
	if m != nil {
		return m.Certificate
	}
	return ""
}

func (m *Bindings) GetUseSni() bool {
	if m != nil {
		return m.UseSni
	}
	return false
}

type Site struct {
	// Name of site.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Name of server. Should refer to a |Server| entry. A single server can host
	// multiple sites as long as those sites use distinct binding information.
	Server   string    `protobuf:"bytes,2,opt,name=server" json:"server,omitempty"`
	Bindings *Bindings `protobuf:"bytes,3,opt,name=bindings" json:"bindings,omitempty"`
}

func (m *Site) Reset()                    { *m = Site{} }
func (m *Site) String() string            { return proto.CompactTextString(m) }
func (*Site) ProtoMessage()               {}
func (*Site) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

func (m *Site) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Site) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *Site) GetBindings() *Bindings {
	if m != nil {
		return m.Bindings
	}
	return nil
}

type Application struct {
	// Name of application.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Name of the iis.Site that's hosting this application.
	Site string `protobuf:"bytes,2,opt,name=site" json:"site,omitempty"`
}

func (m *Application) Reset()                    { *m = Application{} }
func (m *Application) String() string            { return proto.CompactTextString(m) }
func (*Application) ProtoMessage()               {}
func (*Application) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *Application) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Application) GetSite() string {
	if m != nil {
		return m.Site
	}
	return ""
}

func init() {
	proto.RegisterType((*Server)(nil), "asset.Server")
	proto.RegisterType((*Bindings)(nil), "asset.Bindings")
	proto.RegisterType((*Site)(nil), "asset.Site")
	proto.RegisterType((*Application)(nil), "asset.Application")
}

func init() { proto.RegisterFile("schema/asset/iis.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 300 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xc1, 0x4e, 0x83, 0x40,
	0x10, 0x86, 0x83, 0xb6, 0x88, 0xdb, 0xa8, 0xc9, 0x1e, 0x2a, 0xe9, 0x89, 0x70, 0x6a, 0x62, 0x02,
	0x6a, 0xe3, 0x03, 0xd8, 0x27, 0x30, 0xf4, 0xe6, 0xa5, 0xa1, 0xeb, 0x08, 0x13, 0x61, 0x87, 0xec,
	0x2c, 0xfa, 0x3e, 0x3e, 0xa9, 0xd9, 0x85, 0x92, 0x9a, 0xe8, 0xed, 0x9f, 0x8f, 0x61, 0xe6, 0xff,
	0x67, 0xc5, 0x92, 0x55, 0x0d, 0x6d, 0x99, 0x97, 0xcc, 0x60, 0x73, 0x44, 0xce, 0x3a, 0x43, 0x96,
	0xe4, 0xdc, 0x83, 0xd5, 0xea, 0xd7, 0x67, 0x0d, 0xf6, 0x8b, 0xcc, 0xc7, 0xd0, 0x92, 0xde, 0x8b,
	0x70, 0x07, 0xe6, 0x13, 0x8c, 0x94, 0x62, 0xa6, 0xcb, 0x16, 0xe2, 0x20, 0x09, 0xd6, 0x97, 0x85,
	0xd7, 0x8e, 0xd5, 0xc4, 0x36, 0x3e, 0x1b, 0x98, 0xd3, 0xe9, 0x77, 0x20, 0xa2, 0x2d, 0xea, 0x37,
	0xd4, 0x15, 0xcb, 0x95, 0x88, 0x1c, 0x3c, 0xf9, 0x71, 0xaa, 0xe5, 0x9d, 0x88, 0xfc, 0x0e, 0x45,
	0x8d, 0x1f, 0x70, 0xfd, 0x78, 0x93, 0x79, 0x0b, 0xd9, 0xcb, 0x88, 0x8b, 0xa9, 0xc1, 0x6d, 0xea,
	0xc8, 0xd8, 0xf8, 0x3c, 0x09, 0xd6, 0x57, 0x85, 0xd7, 0x32, 0x11, 0x0b, 0x05, 0xc6, 0xe2, 0x3b,
	0xaa, 0xd2, 0x42, 0x3c, 0xf3, 0xf3, 0x4f, 0x91, 0xbc, 0x15, 0x17, 0x3d, 0xc3, 0x9e, 0x35, 0xc6,
	0xf3, 0x24, 0x58, 0x47, 0x45, 0xd8, 0x33, 0xec, 0x34, 0xa6, 0x7b, 0x31, 0xdb, 0xa1, 0x85, 0x3f,
	0x43, 0x2d, 0x45, 0xc8, 0x3e, 0xf2, 0x18, 0x6b, 0xac, 0x9c, 0xdf, 0xc3, 0x98, 0xcb, 0xdb, 0x58,
	0x4c, 0x7e, 0x8f, 0x71, 0x8b, 0xa9, 0x21, 0x7d, 0x12, 0x8b, 0xe7, 0xae, 0x6b, 0x9c, 0x0d, 0x24,
	0xfd, 0xdf, 0xf1, 0x18, 0x2d, 0x1c, 0x8f, 0xe7, 0xf4, 0x76, 0xf3, 0xfa, 0xa0, 0x6a, 0x43, 0x2d,
	0xf6, 0x6d, 0x56, 0x11, 0x55, 0x0d, 0x30, 0xf5, 0x46, 0x41, 0xa6, 0xa8, 0xcd, 0x41, 0x5b, 0x30,
	0x9d, 0x41, 0x86, 0x5c, 0x41, 0x93, 0x57, 0x34, 0xbc, 0xd8, 0x21, 0xf4, 0x57, 0xda, 0xfc, 0x04,
	0x00, 0x00, 0xff, 0xff, 0xec, 0x6f, 0xe9, 0x65, 0xe7, 0x01, 0x00, 0x00,
}
