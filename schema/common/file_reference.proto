// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";
package common;
option go_package = "chromium.googlesource.com/enterprise/cel/go/common";

import "schema/common/validation.proto";

// A file reference. Use this when the configuration should refer to a file or
// a directory that's specified as part of the configuraion. All such paths are
// resolved *relative to the source file* in which the reference appears.
message FileReference {
  // Path relative to the location of the .textpb file in which the reference
  // appears. Absolute paths are not allowed.
  //
  //   * Path separators are always forward slashes.
  //   * No parent directory traversal. I.e. ".." is an invalid path component.
  //   * '.' is a valid component, but you might as well leave it out.
  //   * The referenced path must exist.
  //
  // This, of course, means that textpb files that refer to other files should
  // live higher up in the directory tree or live beside the relevant files.
  string source = 1;

  // The path where the target of this FileReference should be copied to on the
  // local machine. This field is optional and is only meaningful when a file
  // or directory should be placed in a specific location on a machine. The
  // machine is implied based on the schema containing the FileReference.
  //
  // The containing schema also determines how the contents of the
  // FileReference is treated. In cases where the local path doesn't matter
  // then an indeterminate temporary path may be used.
  string local_target_path = 2;

  // The full path to source. This is the result of resolving |source| relative
  // to the location of the .textpb file.
  string resolved_source = 3 [(v).type = OUTPUT];

  // After the reference is resolved, this field will contain an opaque
  // reference to an accessible location where the contents of the file or
  // folder could be found. For GCE, this would be a cloud storage location.
  //
  // At runtime and at deployment time, this reference can be looked up via the
  // ObjectStore service.
  string object_reference = 4 [(v).type = OUTPUT];

  // Type of object
  enum Type {
    // This is a regular file.
    FILE = 0;

    // This is a directory. The |size| and |digest| refer to a binary encoded
    // Tree object.
    DIRECTORY = 1;
  }
  Type resolved_type = 5 [(v).type = OUTPUT];
}
