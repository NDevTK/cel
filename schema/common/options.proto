// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";
package common;
option go_package="chromium.googlesource.com/enterprise/cel/go/common";

import "google/protobuf/descriptor.proto";

message Validation {
  enum FieldType {
    // When applied to a 'string' field, implies that the field value cannot be
    // empty. This is the default for any field that has an external reference
    // restriction (i.e. one of 'host_env_ref', 'host_env', 'asset_ref',
    // 'asset').
    //
    // When applied to a 'repeated' field, implies that there must be at least
    // one instance of the field.
    //
    // When applied to 'oneof' implies that at least one of the alternatives must
    // be specified.
    //
    // Note that by default all fields with an annotation are required unless
    // they set the 'optional' property to true (see below). This FieldType
    // exists to make this clear when the only expected side-effect of adding
    // an annotation is to mark it as required.
    //
    // E.g.: Declare the 'h' field of Foo message to be required:
    //
    //     message Foo {
    //       string h = 1 [(v).type=REQUIRED]
    //     }
    REQUIRED = 0;

    // This is an output field and is not expected to be populated in a asset
    // manifest literal. The field will be populated during the asset
    // resolution process and made available to downstream consumers of the
    // manifest.
    OUTPUT = 1;

    // A ASSET field type indicates that the field refers to a resource defined
    // in the AssetManifest message. The value of the option should be an
    // exact match for the 'name' property of an object matching the 'key'
    // type.
    //
    // E.g.: Declare field 'h' of Foo message to be a reference to a Network
    // object.
    //
    //     message Foo {
    //       string h = 1 [(v)={type:ASSET, key:"network"}]
    //     }
    //
    // Alternatively, if the name of the field matches a field in
    // AssetManifest, then the key argument can be elided:
    //
    //     message Foo {
    //       string machine_type = 1 [(v).type:ASSET]
    //     }
    ASSET = 2;

    // A HOST field type indicates that the field refers to a resource defined in
    // the HostEnvironment message. The value of the option should be an exact
    // match for the 'name' property of an object matching the 'key' type.
    //
    // E.g.: Declare field 'h' of Foo message to be a reference to a MachineType
    // object. The value of the 'h' field should match the 'name' property of a
    // MachineType object.
    //
    //     message Foo {
    //       string h = 1 [(v)={type:HOST, key:"machine_type"}]
    //     }
    //
    // Alternatively, if the name of the field matches a field in
    // HostEnvironment, then the key argument can be elided:
    //
    //     message Foo {
    //       string machine_type = 1 [(v).type:HOST]
    //     }
    HOST = 3;

    // The field value cannot be empty and must match the <label> production in
    // RFC 1035. This is the default for any field named 'name'.
    LABEL = 4;

    // The field value cannot be empty, and must match the <subdomains>
    // production in RFC 1035. Can only be applied to 'string' fields.
    FQDN = 5;

    // A label with an optional org component. These look like: example.com:foo
    ORGLABEL = 6;
  }
  FieldType type = 1;

  // The foreign key, if the key name is different from the field name. See the
  // FieldType documentation for examples of use.
  string key = 2;

  // Indicates that the value is optional. By default adding an annotaiton to a
  // field marks it as a required field.
  bool optional = 3;
}

// Field options. These are used to annotate fields in asset and host messages
// to indicate foreign keys, and additional validation requirements.
extend google.protobuf.FieldOptions {
  // See Validation above.
  // Use as:
  //     message Foo {
  //       string my_field = 1 [(v).type=<type>];
  //     }
  //
  // Or more commonly:
  //     message Foo {
  //       string my_field = 1 [(common.v).type=<type>];
  //
  // Or:
  //     message Foo {
  //       string my_field = 1 [(common.v)={type:<type>, key:"<key>"}];
  //     }
  Validation v = 50000;
}

