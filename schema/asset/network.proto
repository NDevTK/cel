// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";
package asset;
option go_package = "chromium.googlesource.com/enterprise/cel/go/asset";

import "schema/common/validation.proto";

message Network {
  // Name of the network.
  string name = 1;

  // The address range assigned to the network. If left unspecified, an address
  // range will be determined when deploying the assets. This is the preferred
  // option unless an explicit address range is required.
  //
  // Two networks in the same asset manifest can't have overlapping address
  // ranges even if they aren't peers.
  AddressRange address_range = 2;
}

// NetworkPeer describes a peering group. All networks that are a member of a
// peering group can route traffic across each other.
message NetworkPeer {
  // List of networks that should form a full mesh. Individual networks are
  // isolated by default and are only able to talk to each other if:
  //   * They are a part of a peering group, or
  //   * They are connected via a VPN gateway, or
  //   * They are connected via a [virtual] router.
  //
  // A single nework can participate in multiple disjoint peering groups,
  // however peering is not transitive. I.e. If {A,B} is a peering group, and
  // {B,C} is a peering group, traffic from A still can't route to C.
  repeated string network = 1 [(common.v).ref = "asset.network"];
}

// Address is an IPv4 or IPv6 address.
message Address {
  string ip = 1 [(common.v).type = REQUIRED];
}

// AddressRange is an IPv4 or IPv6 CIDR range.
message AddressRange {
  string cidr = 1 [(common.v).type = REQUIRED];
}

// FixedAddress described an address that is determined either by the host
// environment or by the asset manifest.
message FixedAddress {
  oneof address_type {
    // Single literal address.
    Address address = 1;

    // One of the available addresses from the named |host.AddressPool| will be
    // used.
    string address_pool = 2 [(common.v).ref = "host.address_pool"];
  }

  // Upon resolution, this field will contain the actual IP address that's
  // assigned to this network interface.
  Address resolved_address = 3 [(common.v).type = OUTPUT];
}

// List of web protocols. Not necessarily exhaustive. We just need a convenient
// enum so that we don't need to defined it everywhere. Values should be self
// explanatory.
enum Protocol {
  UNKNOWN = 0;
  HTTP = 1;
  HTTPS = 2;
}
