// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

syntax = "proto3";
package asset;
option go_package="chromium.googlesource.com/enterprise/cel/go/asset";

import "schema/common/fileref.proto";
import "schema/asset/network.proto";
import "schema/common/options.proto";

// Describes an Active Directory domain or forest.
message ActiveDirectoryDomain {
  // FQDN of the domain in lower case.
  string name = 1 [(common.v).type=FQDN];

  // Parent domain name. Only specify this if this domain is going to be a
  // child domain.
  string parent_name = 2 [(common.v)={type:ASSET, key:"ad_domain"}];

  // Active Directory functional level. A.k.a. Domain Mode. See
  // https://docs.microsoft.com/en-us/windows-server/identity/ad-ds/active-directory-functional-levels
  // for more details on the specific features that are available at each
  // functional level.
  enum Mode {
    // Use the default. The default functional level depends on the host OS and
    // on the other AD DS servers in the domain or forest.
    DEFAULT = 0;

    Win2003 = 2;
    Win2008 = 3;
    Win2008R2 = 4;
    Win2012 = 5;
    Win2012R2 = 6;
    Win2016 = 7;
  }
  Mode domain_mode = 3;

  // NetBIOS name. Required if |name| is longer than 15 characters.
  string netbios_name = 4;

  // Domain type
  enum Type {
    // Child of an existing domain. (This is the default)
    CHILD = 0;

    // Root of a new domain tree.
    TREE = 1;
  }
  Type type = 5;

  // Forest functional level (only applicable when creating a new forest.
  Mode forest_mode = 6;
};

// Describes a single Active Directory Domain Controller.
message ActiveDirectoryDomainController {
  // Name of the domain. Must match the `name` field of an
  // ActiveDirectoryDomain entry.
  string ad_domain = 1 [(common.v).type=ASSET];

  // Machine hosting the ADDS. Must match the `name` of a WindowsMachine entry.
  string windows_machine = 2 [(common.v).type=ASSET];

  // Whether or not to install a DNS server on this machine. The default is
  // almost always |true| unless the domain already exists and the existing
  // domain controller does not host a DNS server.
  //
  // Don't specify the option if you would like the domain controller to do the
  // default action. Or specify it to force one or the other.
  oneof optional_dns { bool install_dns = 3; }

  // Assume DNS service is not available on the network. Only applicable when
  // installing DNS services. If this field is not set, or set to false, then
  // the installation can assume that the TCP/IP client settings of the host OS
  // specifies the DNS server to use.
  bool no_dns_on_network = 4;

  // This domain controller should not be a global catalog server. Default is
  // to run with global catalog for Win2012 or later.
  bool no_global_catalog = 5;

  // If true, attempts to create a DNS delegation for the new DNS server. Only
  // applicable when installing a DNS server. E.g.: If the authoritative DNS
  // server for foo.example.com is using ActiveDirectory, and we are installing
  // the subordinate domain bar, then setting this value to true causes
  // foo.example.com to delegate the bar domain to the new DNS server.
  bool create_dns_delegation = 6;
}

// Describes a container that a Windows asset can reside in.
//
// Resources like machines, users, and groups can be specified per domain, per
// machine, or per organizational unit. When specifying one of these asset
// types, use the WindowsContainer member to specify where to create the asset.
message WindowsContainer {
  oneof container {
    // Domain name.
    string ad_domain = 1 [(common.v).type=ASSET];

    // Machine name.
    string windows_machine = 2 [(common.v).type=ASSET];

    // Organizational unit.
    string ad_organizational_unit = 3 [(common.v).type=ASSET];
  }
}

// Descibes an Active Directory or Windows local group.
message WindowsGroup {
  // Name of the group. Exclude the domain name. The name alone is not
  // sufficient if this group corresponds to a Well Known group. Use the
  // |well_known_sid| field for that.
  string name = 1;

  // The actual Unicode Windows group name. Only specify this if the desired
  // name is different from the |name| field due to not being an RFC 1035
  // label.
  string full_name = 2;

  // Human readable description of the group.
  string description = 3;

  // Container for the group. A container must be specified for a WindowsGroup.
  WindowsContainer container = 4 [(common.v).type=REQUIRED];

  // Well-known security identifier. The string should be of the form S-* and
  // should correspond to a known SID as described in
  // https://support.microsoft.com/en-us/help/243330/well-known-security-identifiers-in-windows-operating-systems.
  //
  // Only specify this field if this group corresponds to a well known group.
  string well_known_sid = 5;
}

// A reference to a group. The combination of |name| and |container| must match
// one of the WindowsGroup entries.
message GroupReference {
  // The name of the group.
  string windows_group = 1 [(common.v).type=ASSET];

  // Location. Since GroupReference messages are typically specified as a field
  // of an object that already has a container, omiting this field results in
  // the GroupReference inheriting the parent object's container. Take for
  // example, the following WindowsUser definition:
  //
  //     windows_user {
  //       name: 'joe'
  //       container: { domain: 'foo.example' }
  //       member_of: { name: 'bar' }
  //     }
  //
  // This results in the user being a member of the group 'bar' in the
  // 'foo.example' AD domain because that's the enclosing container.  Note
  // however, that inheriting in this manner isn't always correct since it is
  // possible for users to be members of groups from other containers.
  WindowsContainer container = 2;
}

// Describes a Active Directory or a Windows local user.
message WindowsUser {
  // Name of the user. Exclude the domain name.
  //
  // E.g.: joe
  string name = 1;

  // The actual Unicode Windows user name. Only specify this if the desired
  // name is different from the |name| field due to not being an RFC 1035
  // label.
  string full_name = 2;

  // Description.
  string description = 3;

  // Container for the user. A container must be specified for a WindowsUser.
  WindowsContainer container = 4 [(common.v).type=REQUIRED];

  // Password. Can be left blank in which case each instantiation of the lab
  // will cause a new password to be generated.
  string password = 5;

  // List of groups that the user belongs to.
  repeated GroupReference member_of = 6;
}

// NetworkInterface describes a single network interface on a machine.
message NetworkInterface {
  // Name of Network entry describing the network that this interface is
  // attached to.
  string network = 1 [(common.v).type=ASSET];

  // Fixed address, if this interface is to have one. Leave undefined if the
  // interface should obatain an address automatically.
  FixedAddress fixed_address = 2;
}

// A Windows machine.
message WindowsMachine {
  // Name of the machine. This name will become the hostname for the machine,
  // both absolute and domain relative (if applicable). Hence must be globally
  // unique.
  //
  // For Windows machines, it's advisable to have *short* hostnames, ideally
  // shorter than 11 characters. This allows the name to do double duty as a
  // NetBios name as well as a DNS hostname.
  string name = 1;

  // Container. Only |domain| and |ou| values are acceptable. Currently
  // |machine| is not a valid option. If no container is specified, the machine
  // will be brought up as a standalone workstation or server depending on the
  // installed operating system.
  //
  // This field should be empty for a machine that's referenced in a
  // ActiveDirectoryDomainController entry.
  //
  // Specifying this field results in the machine being joined to the specified
  // domain and, if necessary, placed in the specified container.
  WindowsContainer container = 3;

  // The name of a host.MachineType entry that describes the host machine.
  string machine_type = 4 [(common.v).type=HOST];

  // System locale. If left unspecified, the default is left unchanged. Use the
  // following PowerShell command to determine the list of available locales on
  // a Windows machine:
  //
  //     ``` ps1
  //     [System.Globalization.CultureInfo]::GetCultures([System.Globalization.CultureTypes]::AllCultures).name
  //     ```
  //
  // PS DSC Reference:
  // * https://github.com/PowerShell/SystemLocaleDsc
  string locale = 5;

  // Set the system timezone. If left unspecified, the default is left
  // unchanged. Use the following PowerShell command to determine the lsit of
  // available timezone identifiers on a Windows machine:
  //
  //     ``` ps1
  //     [System.TimeZoneInfo]::GetSystemTimeZones().Id
  //     ```
  //
  // PS DSC Reference:
  // * https://github.com/PowerShell/xTimeZone
  string timezone = 6;

  // Network interfaces. There can be more than one for multihomed machines.
  // There MUST be at least one of these.
  repeated NetworkInterface network_interface = 7 [(common.v).type=REQUIRED];

  // List of additional Windows features or roles to install. The values here
  // should be valid for the selected host machine type. You can use the
  // 'Get-WindowsFeature' PowerShell commandlet to retrieve a list of available
  // Windows features.
  //
  // E.g.: windows_feature: "Web-Server"
  //
  // Note: This method cannot be used to specify all sub-features. All 
  // features that needs to be installed should be listed explicitly.
  //
  // Note: Addition of roles can cause features to be installed implicitly.
  // E.g. specifying a machine as the host for an IIS site will automatically
  // install the necessary web server roles. The |windows_feature| field should
  // be used for features that otherwise won't be installed as part of any such
  // role assignment.
  repeated string windows_feature = 8;

  // A configuration file. Specify this if you've run Windows Server Manager
  // and produced a configration file already.
  common.FileReference configuration_file = 10;
}

